<root><template><title>Merge from</title><part><name index="1"/><value>Service-Oriented Architecture Types</value></part><part><name>date</name><equals>=</equals><value>April 2010</value></part></template>
<template lineStart="1"><title>Merge from</title><part><name index="1"/><value>Service Oriented Architecture Fundamentals</value></part><part><name>date</name><equals>=</equals><value>April 2011</value></part></template>
<template lineStart="1"><title>multiple issues</title><part><name> cleanup </name><equals>=</equals><value> July 2008</value></part><part><name> refimprove </name><equals>=</equals><value> July 2008</value></part></template>
[[Image:Soa-layers.svg|thumb|Layer interaction in service-oriented Architecture]]
<template lineStart="1"><title>Programming paradigms</title></template>

In [[software engineering]], a '''Service-Oriented Architecture ''' ('''SOA''') is a set of principles and [[methodologies]] for designing and developing software in the form of [[interoperability|interoperable]] [[Service (systems architecture)|services]]. These services are well-defined business functionalities that are built as [[software component]]s (discrete [[subroutine|pieces of code]] and/or [[data structure]]s) that can be [[code reuse|reused]] for different purposes. SOA [[Systems design|design]] principles are used during the phases of [[systems development]] and [[systems integration|integration]].

SOA also generally provides a way for consumers of services, such as web-based applications, to be aware of available SOA-based services.  For example, several disparate departments within a company may develop and deploy SOA services in different implementation languages; their respective [[Client (computing)|clients]] will benefit from a well-understood, well-defined interface to access them. [[XML]] is often used for interfacing  with SOA services, though this is not required. [[JSON]] is also becoming increasingly common.

SOA defines how to integrate widely disparate applications for a Web-based environment and uses multiple implementation platforms. Rather than defining an [[API]], SOA defines the interface in terms of protocols and functionality. An ''endpoint'' is the entry point for such a SOA implementation.

[[Service orientation]] requires ''[[loose coupling]]'' of services with [[operating system]]s, and other technologies that underlie applications. SOA separates functions into distinct units, or services,<ext><name>ref</name><attr> name=&quot;Bell&quot; </attr></ext> which developers make accessible over a network in order to allow users to combine and reuse them in the production of applications. These services and their corresponding consumers communicate with each other by passing data in a well-defined, shared format, or by coordinating an activity between two or more services.<ext><name>ref</name><attr> name=&quot;Bell_&quot;</attr><inner>
{{cite book |last=Bell_ |first=Michael|title=SOA Modeling Patterns for Service-Oriented Discovery and Analysis |year=2010 |publisher=Wiley &amp; Sons|isbn=978-0470481974 |pages=390}}</inner><close>&lt;/ref&gt;</close></ext>

SOA can be seen in a [[Continuum (theory)|continuum]], from older concepts of [[distributed computing]]<ext><name>ref</name><attr> name=&quot;Bell&quot; </attr></ext><ext><name>ref</name><attr> name=&quot;Erl&quot; </attr></ext> and [[modular programming]], through SOA, and on to current practices of [[Mashup_(web_application_hybrid)|mashup]]s, [[SaaS]], and [[Cloud Computing]] (which some see as the offspring of SOA <ext><name>ref</name><attr/><inner>[http://apsblog.burtongroup.com/2009/01/soa-is-dead-long-live-services.html]</inner><close>&lt;/ref&gt;</close></ext>).

<h level="2" i="1">==Description==</h>
<h level="3" i="2">===Overview===</h>

The SOA implementations rely on a mesh of software services. Services comprise unassociated, [[loosely coupled]] units of functionality that have no [[subroutine|call]]s to each other embedded in them. Each service implements one action, such as filling out an online application for an account, or viewing an online bank statement, or placing an online booking or airline ticket order. Rather than services embedding calls to each other in their source code, they use defined protocols that describe how services [[message passing|pass]] and parse messages using description metadata.

SOA developers associate individual SOA objects by using [[Orchestration (computers)|orchestration]]. In the process of orchestration the developer associates software functionality (the services) in a non-hierarchical arrangement using a software tool that contains a complete list of all available services, their characteristics, and the means to build an application utilizing these sources.

Underlying and enabling all of this requires [[metadata]] in sufficient detail to describe not only the characteristics of these services, but also the data that drives them. Programmers have made extensive use of [[XML]] in SOA to structure data that they wrap in a nearly exhaustive description-container. Analogously, the [[Web Services Description Language]] (WSDL) typically describes the services themselves, while the [[SOAP (protocol)|SOAP]] protocol describes the communications protocols. Whether these description languages are the best possible for the job, and whether they will become/remain the favorites in the future, remain open questions. <template><title>As of</title><part><name index="1"/><value>2008</value></part></template> SOA depends on data and services that are described by metadata that should meet the following two criteria:

# The metadata should come in a form that software systems can use to configure dynamically by discovery and incorporation of defined services, and also to maintain coherence and integrity. For example, metadata could be used by other applications, like a catalogue, to perform autodiscovery of services without modifying the functional contract of a service.
# The metadata should come in a form that system designers can understand and manage with a reasonable expenditure of cost and effort.

SOA aims to allow users to string together fairly large chunks of functionality to form ''ad hoc'' applications that are built almost entirely from existing software services. The larger the chunks, the fewer the interface points required to implement any given set of functionality; however, very large chunks of functionality may not prove sufficiently granular for easy reuse. Each interface brings with it some amount of processing overhead, so there is a performance consideration in choosing the granularity of services. The great promise of SOA suggests that the [[marginal cost]] of creating the n-th application is low, as all of the software required already exists to satisfy the requirements of other applications. Ideally, one requires only orchestration to produce a new application.

For this to operate, no interactions must exist between the chunks specified or within the chunks themselves. Instead, humans specify the interaction of services (all of them unassociated peers) in a relatively ''ad hoc'' way with the intent driven by newly emergent requirements. Thus the need for services as much larger units of functionality than traditional functions or classes, lest the sheer complexity of thousands of such granular objects overwhelm the application designer. Programmers develop the services themselves using traditional languages like [[Java (programming language)|Java]], [[C (programming language)|C]], [[C++]], [[C Sharp (programming language)|C#]], [[Visual Basic]], [[COBOL]], or [[PHP]].

SOA services feature [[loose coupling]], in contrast to the functions that a linker binds together to form an [[executable]], to a [[dynamically linked library]] or to an assembly. SOA services also run in &quot;safe&quot; wrappers (such as [[Java platform|Java]] or [[Microsoft .NET|.NET]]) and in other programming languages that manage memory allocation and reclamation, allow ''ad hoc'' and late binding, and provide some degree of indeterminate [[data typing]].

<template lineStart="1"><title>As of</title><part><name index="1"/><value>2008</value></part></template>, increasing numbers of third-party software companies offer software services for a fee. In the future, SOA systems may<template><title>Or</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> consist of such third-party services combined with others created in-house. This has the potential to spread costs over many customers and customer uses, and promotes standardization both in and across industries. In particular, the travel industry now has a well-defined and documented set of both services and data, sufficient to allow any reasonably competent software engineer to create travel-agency software using entirely off-the-shelf software services.<ext><name>ref</name><attr/><inner>http://www.opentravel.org/</inner><close>&lt;/ref&gt;</close></ext> Other industries, such as the finance industry, have also started making significant progress in this direction.

SOA as an architecture relies on [[service orientation]] as its fundamental design principle.<ext><name>ref</name><attr/><inner>An alternative view, particularly after initial deployments, denies that SOAs properly ought to dictate physical implementation, so the formal definition should not include &quot;network&quot;. High-performance SOAs may not be viable, especially if deployed to distributed nodes on a network. Separate nodes for every (or most) services could become prohibitively expensive.</inner><close>&lt;/ref&gt;</close></ext> If a service presents a simple interface that abstracts away its underlying complexity, users can access independent services without knowledge of the service's platform implementation.<ext><name>ref</name><attr/><inner>Channabasavaiah, Holley and Tuggle, [http://www-128.ibm.com/developerworks/library/ws-migratesoa/ Migrating to a service-oriented architecture], ''[[IBM]] DeveloperWorks'', 16 December 2003.</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="3">===Requirements===</h>

In order to efficiently use a SOA, the architecture must meet the following requirements:

* Interoperability among different systems and programming languages that provides the basis for integration between applications on different platforms through a communication protocol. One example of such communication depends on the concept of [[Message-oriented middleware|messages]]. Using messages across defined message channels decreases the complexity of the end application, thereby allowing the developer of the application to focus on true application functionality instead of the intricate needs of a communication protocol.
* Desire to create a federation of resources. Establish and maintain data flow to a [[federated database system]]. This allows new functionality developed to reference a common business format for each data element.

<h level="3" i="4">===Principles===</h>

The following '''guiding principles''' define the ground rules for development, maintenance, and usage of the SOA<ext><name>ref</name><attr/><inner>Yvonne Balzer [http://www-128.ibm.com/developerworks/webservices/library/ws-improvesoa/ Improve your SOA project plans], ''[[IBM]]'', 16 July 2004</inner><close>&lt;/ref&gt;</close></ext>:

* reuse, [[granularity]], [[Modularity (programming)|modularity]], composability, componentization and [[interoperability]].
* standards-compliance (both common and industry-specific).
* services identification and categorization, provisioning and delivery, and monitoring and tracking.

The first published research of service orientation from an industry perspective was provided by [[Thomas Erl]] of SOA Systems Inc. who defined [http://soaprinciples.com eight specific service-orientation principles] common to all primary SOA platforms. These principles were published in “Service-Oriented Architecture: Concepts, Technology, and Design”, on the www.soaprinciples.com research site, and in the September 2005 edition of the Web Services Journal (see [[Service-orientation]]).

* '''[[#Service contract|Standardized service contract]]''' – Services adhere to a communications agreement, as defined collectively by one or more service-description documents.

* '''[[Service loose coupling]]''' – Services maintain a relationship that minimizes dependencies and only requires that they maintain an awareness of each other.

* '''[[Service abstraction]]''' – Beyond descriptions in the service contract, services hide logic from the outside world.

* '''[[Service Reusability Principle|Service reusability]]''' – Logic is divided into services with the intention of promoting reuse.

* '''[[Service Autonomy Principle|Service autonomy]]''' – Services have control over the logic they encapsulate.

* '''[[Service Granularity Principle|Service granularity]]''' – A design consideration to provide optimal scope and right granular level of the business functionality in a service operation.

* '''[[Service Statelessness Principle|Service statelessness]]''' - Services minimize resource consumption by deferring the management of state information when necessary

* '''[[Service discovery|Service discoverability]]''' – Services are supplemented with communicative meta data by which they can be effectively discovered and interpreted.

* '''[[Service Composability Principle|Service composability]]''' – Services are effective composition participants, regardless of the size and complexity of the composition.

Some authors also include the following principles:
* '''Service normalization''' – Services are decomposed and/or consolidated to a level of normal form to minimize redundancy. In some cases, services are denormalized for specific purposes, such as performance optimization, access, and aggregation.<ext><name>ref</name><attr/><inner>Tony Shan, [http://doi.ieeecomputersociety.org/10.1109/SCC.2004.1358011 &quot;Building a Service-Oriented eBanking Platform&quot;], scc, pp.237-244, First IEEE International Conference on Services Computing (SCC'04), 2004</inner><close>&lt;/ref&gt;</close></ext>
* '''Service optimization''' – All else equal, high-quality services are generally preferable to low-quality ones.
* '''Service relevance''' – Functionality is presented at a granularity recognized by the user as a meaningful service.
* '''Service [[Encapsulation (computer science)|encapsulation]]''' – Many services are consolidated for use under the SOA. Often such services were not planned to be under SOA.
* '''Service location transparency''' – This refers to the ability of a service consumer to invoke a service regardless of its actual location in the network. This also recognizes the discoverability property (one of the core principle of SOA) and the right of a consumer to access the service. Often, the idea of service virtualization also relates to location transparency. This is where the consumer simply calls a logical service while a suitable SOA-enabling runtime infrastructure component, commonly a service bus, maps this logical service call to a physical service.

The following references provide additional considerations for defining a SOA implementation:
* [http://www.ibm.com/developerworks/webservices/library/ws-soa-design1/ SOA reference architecture] provides a working design of an enterprise-wide SOA implementation with detailed architecture diagrams, component descriptions, detailed requirements, [[Design pattern (computer science)|design pattern]]s, opinions about standards, patterns on regulation compliance, standards templates etc.<ext><name>ref</name><attr/><inner>[http://www.soablueprint.com/whitepapers/SOAPGPart2.pdf SOA Practitioners Guide Part 2: SOA Reference Architecture]</inner><close>&lt;/ref&gt;</close></ext>
* Life-cycle management [http://www.soablueprint.com/whitepapers/SOAPGPart3.pdf SOA Practitioners Guide Part 3: Introduction to Services Lifecycle] introduces the services lifecycle and provides a detailed process for services management through the service lifecycle, from inception to retirement or repurposing of the services. It also contains an appendix that includes organization and governance best-practices, templates, comments on key SOA standards, and recommended links for more information.
* [http://www.ibm.com/developerworks/webservices/library/ws-soa-design/ SOA design principles] provides more information about SOA realization using Service design principles

In addition, one might take the following factors into account when defining a SOA implementation:

* Efficient use of system resources
* Service maturity and performance
* EAI ([[Enterprise Application Integration]])

<h level="3" i="5">===Web services approach===</h>

[[Web service]]s can implement a service-oriented architecture. Web services make functional building-blocks accessible over standard Internet protocols independent of platforms and programming languages. These services can represent either new applications or just wrappers around existing legacy systems to make them network-enabled.

Each SOA building block can play one or both of two roles:

# '''Service provider''' - The service provider creates a [[web service]] and possibly publishes its interface and access information to the service registry. Each provider must decide which services to expose, how to make trade-offs between security and easy availability, how to price the services, or (if no charges apply) how/whether to exploit them for other value. The provider also has to decide what category the service should be listed in for a given broker service and what sort of trading partner agreements are required to use the service. It registers what services are available within it, and lists all the potential service recipients. The implementer of the broker then decides the scope of the broker. Public brokers are available through the Internet, while private brokers are only accessible to a limited audience, for example, users of a company intranet. Furthermore, the amount of the offered information has to be decided. Some brokers specialize in many listings. Others offer high levels of trust in the listed services. Some cover a broad landscape of services and others focus within an industry. Some brokers catalog other brokers. Depending on the [[business model]], brokers can attempt to maximize look-up requests, number of listings or accuracy of the listings. The [[Universal Description Discovery and Integration]] (UDDI) specification defines a way to publish and discover information about Web services. Other service broker technologies include (for example) [[ebXML]] (Electronic Business using eXtensible Markup Language) and those based on the [[ISO/IEC 11179]] [[Metadata Registry]] (MDR) standard.
# '''Service consumer''' - The service consumer or [[web service]] client locates entries in the broker registry using various find operations and then binds to the service provider in order to invoke one of its web services. Whichever service the service-consumers need, they have to take it into the brokers, then bind it with respective service and then use it. They can access multiple services if the service provides multiple services.

<h level="3" i="6">===SOA and web-service protocols===</h>
<template lineStart="1"><title>Unreferenced section</title><part><name>date</name><equals>=</equals><value>June 2006</value></part></template>

Implementors commonly build SOAs using [[web service]]s standards (for example, [[SOAP (protocol)|SOAP]]) that have gained broad industry acceptance after recommendation of Version 1.2 from the W3C<ext><name>ref</name><attr/><inner>http://www.w3.org/2003/06/soap12-pressrelease</inner><close>&lt;/ref&gt;</close></ext> (World Wide Web Consortium) in 2003. These standards (also referred to as [[List of Web service specifications|Web service specifications]]) also provide greater interoperability and some protection from lock-in to proprietary vendor software. One can, however, implement SOA using any service-based technology, such as [[Jini]], [[CORBA]] or [[Representational State Transfer|REST]].

<h level="3" i="7">===Other SOA concepts===</h>
Architectures can operate independently of specific technologies.<ext><name>ref</name><attr> name=&quot;Erl&quot;</attr><inner>Erl, Thomas. [http://www.serviceorientation.org/ Serviceorientation.org – About the Principles], 2005–06</inner><close>&lt;/ref&gt;</close></ext> Designers can implement SOA using a wide range of technologies, including:

* [[SOAP (protocol)|SOAP]], [[Remote procedure call|RPC]]
* [[REST]]
* [[Distributed Component Object Model|DCOM]]
* [[Common Object Request Broker Architecture|CORBA]]
* [[Web Services]]
* [[Data Distribution Service|DDS]]
* [[Windows Communication Foundation|WCF]] (Microsoft's implementation of web services now forms a part of [[Windows Communication Foundation|WCF]])

Implementations can use one or more of these protocols and, for example, might use a file-system mechanism to communicate data conforming to a defined interface specification between processes conforming to the SOA concept. The key is independent services with defined interfaces that can be called to perform their tasks in a standard way, without a service having foreknowledge of the calling application, and without the application having or needing knowledge of how the service actually performs its tasks.

Many implementers of SOA have begun<template><title>When</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> to adopt an evolution of SOA concepts into a more advanced<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> architecture called [[event-driven SOA|SOA 2.0]].

[[Image:SOA Elements.png|thumb|450px|right|Elements of SOA, by Dirk Krafzig, Karl Banke, and Dirk Slama<ext><name>ref</name><attr/><inner>''Enterprise SOA''. Prentice Hall, 2005</inner><close>&lt;/ref&gt;</close></ext>]]
[[Image:SOA Metamodel.svg|thumb|450px|right|SOA meta-model, The Linthicum Group, 2007]]
[[Image:SOMF V 2.0.jpg|thumb|450px|right|Service-Oriented Modeling Framework (SOMF) Version 2.0]]

SOA enables the development of applications that are built by combining [[loosely coupled]] and [[interoperable]] services.<ext><name>ref</name><attr/><inner>{{cite book |last=[http://eden.dei.uc.pt/~jcardoso/ Cardoso] |first=Jorge |coauthors=Sheth, Amit P. |others=Foreword by Frank Leymann |title=Semantic Web Services, Processes and Applications |series=SEMANTIC WEB AND BEYOND: Computing for Human Experience |year= 2006 |publisher=Springer |isbn=978-0-387-30239-3 |pages=xxi |chapter=Foreword
|quote= The corresponding architectural style is called &quot;service-oriented architecture&quot;: fundamentally, it describes how service consumers and service providers can be decoupled via discovery mechanisms resulting in loosely coupled systems. Implementing a service-oriented architecture means to deal with heterogeneity and interoperability concerns.
|nopp=true}}</inner><close>&lt;/ref&gt;</close></ext>

These services inter-operate based on a formal definition (or contract, e.g., [[Web Services Description Language|WSDL]]) that is independent of the underlying platform and programming language. The interface definition [[information hiding|hides the implementation]] of the language-specific service. SOA-based systems can therefore function independently of development technologies and platforms (such as [[Java platform|Java]], [[Microsoft .NET|.NET]], etc.). Services written in [[C Sharp (programming language)|C#]] running on .NET platforms and services written in Java running on [[Java Platform, Enterprise Edition|Java EE]] platforms, for example, can both be consumed by a common composite application (or client). Applications running on either platform can also consume services running on the other as web services that facilitate reuse. Managed environments can also wrap COBOL legacy systems and present them as software services. This has extended the useful life of many core legacy systems indefinitely<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>August 2011</value></part></template>, no matter what language they originally used.

SOA can support integration and consolidation activities within complex [[Enterprise architecture|enterprise]] systems, but SOA does not specify or provide a methodology or [[Conceptual framework|framework]] for documenting capabilities or services.

[[High-level programming language|High-level language]]s such as [[BPEL]] and specifications such as [[WS-CDL]] and [[WS-Coordination]] extend the service concept by providing a method of defining and supporting [[orchestration (computers)|orchestration]] of fine-grained services into more coarse-grained business services, which architects can in turn incorporate into workflows and business processes implemented in [[composite applications]] or [[Enterprise portal|portals]]<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>February 2007</value></part></template>.

<template lineStart="1"><title>As of </title><part><name index="1"/><value>2008</value></part></template> researchers have started investigating the use of [[service component architecture]] (SCA) to implement SOA.

[[Service-oriented modeling]] <ext><name>ref</name><attr> name=&quot;Bell&quot;</attr><inner>
{{cite book |last=Bell |first=Michael|title=Service-Oriented Modeling: Service Analysis, Design, and Architecture|year= 2008 |publisher=Wiley &amp; Sons|isbn=978-0-470-14111-3 |pages=3 |chapter=Introduction to Service-Oriented Modeling}}</inner><close>&lt;/ref&gt;</close></ext> is a SOA framework that identifies the various disciplines that guide SOA practitioners to conceptualize, analyze, design, and architect their service-oriented assets. The [[service-oriented_modeling#Service-oriented_modeling_framework_(SOMF)|Service-oriented modeling framework (SOMF)]] offers a modeling language and a work structure or &quot;map&quot; depicting the various components that contribute to a successful service-oriented modeling approach. It illustrates the major elements that identify the “what to do” aspects of a service development scheme. The model enables practitioners to craft a [[project plan]] and to identify the milestones of a service-oriented initiative. SOMF also provides a common modeling notation to address alignment between business and IT organizations.

SOMF addresses the following principles:

* business traceability
* architectural best-practices [[traceability]]
* technological traceability
* SOA [[value proposition]]
* software [[asset reuse|assets reuse]]
* SOA integration strategies
* technological abstraction and generalization
* architectural components abstraction

<h level="3" i="8">===SOA definitions===</h>

Commentators have provided multiple definitions of SOA. 

The [[OASIS (organization)|OASIS]] group<ext><name>ref</name><attr/><inner>[http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=soa-rm SOA Reference Model definition]</inner><close>&lt;/ref&gt;</close></ext> and the [[The Open Group|Open Group]]<ext><name>ref</name><attr/><inner>[http://opengroup.org/projects/soa/doc.tpl?gdid=10632 SOA – Documents – Document details&lt;!-- Bot generated title --&gt;]</inner><close>&lt;/ref&gt;</close></ext> have both created formal definitions. OASIS [[OASIS SOA Reference Model|defines SOA]] as the following:

''A paradigm for organizing and utilizing distributed capabilities that may be under the control of different ownership domains. It provides a uniform means to offer, discover, interact with and use capabilities to produce desired effects consistent with measurable preconditions and expectations.''


According to [[Thomas Erl]]:

&lt;blockquote&gt;
SOA represents an open, agile, extensible, federated, composable architecture <template><title>sic</title><part><name>hide</name><equals>=</equals><value>y</value></part><part><name index="1"/><value>comprised</value></part><part><name index="2"/><value> of</value></part></template> autonomous, QoS-capable, vendor diverse, interoperable, discoverable, and potentially reusable services, implemented as Web services. SOA can establish an abstraction of business logic and technology, resulting in a loose coupling between these domains. SOA is an evolution of past platforms, preserving successful characteristics of traditional architectures, and bringing with it distinct principles that foster service-orientation in support of a service-oriented enterprise.  SOA is ideally standardized throughout an enterprise, but achieving this state requires a planned transition and the support of a still evolving technology set.<ext><name>ref</name><attr> name=&quot;Erl&quot; </attr></ext>
&lt;/blockquote&gt;

<h level="3" i="9">===Programmatic service contract===</h>

A service contract needs<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2008</value></part></template> to have the following components:

*Header
**Name – Name of the service. This should indicate in general terms what the service does, not just its definition
**Version – The version of this service contract
**Owner – The person/team in charge of the service
**[[Responsibility assignment matrix|Responsibility assignment (RACI)]]
***Responsible – The role/person/team responsible for the deliverables of this contract/service. All versions of the contract
***Accountable – Ultimate decision-maker in terms of this contract/service
***Consulted – Whom one must consult before action is taken on this contract/service. This is two-way communication. These people have an impact on the decision or the execution of that decision.
***Informed – Who must be informed that a decision or action is being taken. This is a one-way communication. These people are impacted by the decision or execution of that decision, but have no control over the action.
**Type – This is the type of the service: to help distinguish the layer in which it resides. Different implementations will have different service types. Examples of service types include:
***Presentation
***Process
***Business
***Data
***Integration
*Functional
**Functional requirement (from ''requirements document'') – Indicates the functionality in specific bulleted items — what exactly this service accomplishes. The language should encourage test cases to prove the functionality is accomplished.
**Service operations – Methods, actions etc. Must be defined in terms of what part of the functionality it provides.
**Invocation – Indicates how to invoke the service. This includes the URL, interface, etc. There may be multiple invocation paths for the same service. One may have the same functionality for an internal and some external clients, each with different invocation means and interfaces. Examples:
*** [[SOAP]]
*** [[Representational State Transfer|REST]]
*** Events triggers
*Non-functional
**Security constraints – Defines who can execute this service in terms of roles or individual partners etc. and which invocation mechanism they can invoke.
**Quality of service – Determines the allowable failure rate
**Transactional – Is this capable of acting as part of a larger transaction and if so, how do we control that?
**Service level agreement – Determines the amount of latency the service is allowed to have to perform its actions
**Semantics – Dictates or defines the meaning of terms used in the description and interfaces of the service
**Process – Describes the process, if any, of the contracted service

<h level="3" i="10">===SOA and network management architecture===</h>

<template lineStart="1"><title>As of</title><part><name index="1"/><value>2008</value></part></template> the principles of SOA are being applied by network managers in their field. Examples of service-oriented network management architectures include TS 188 001 ''NGN Management OSS Architecture'' from [[ETSI]] and M.3060 ''Principles for the Management Of Next Generation Networks'' recommendation from the [[ITU-T]].

Tools for managing SOA infrastructure include:

* [[HP Software &amp; Solutions]]
* [[HyPerformix|HyPerformix IPS Performance Optimizer]]
* [[IBM Tivoli Framework]]
* [[JBoss operations network|Red Hat JBoss Operations Network]]
* Oracle SOA Management Pack Enterprise Edition [http://www.oracle.com/us/technologies/soa/management-pack-soa-066457.html (Official Product Page)]

<h level="2" i="11">== Discussion==</h>
<h level="3" i="12">===Benefits===</h>

Some [[enterprise architect]]s believe that SOA can help businesses respond more quickly and more cost-effectively to changing market conditions.<ext><name>ref</name><attr/><inner>Christopher Koch [http://www.cio.com.au/index.php/id;1350140708 A New Blueprint For The Enterprise], ''CIO Magazine'', March 1, 2005</inner><close>&lt;/ref&gt;</close></ext> This style of '''architecture''' promotes reuse at the macro (service) level rather than micro (classes) level. It can also simplify interconnection to – and usage of – existing IT (legacy) assets.

In some respects, one can regard SOA as an architectural evolution rather than as a revolution. It captures many of the [[best practice]]s of previous software architectures. In communications systems, for example, little development of solutions that use truly static bindings to talk to other equipment in the network has taken place. By formally embracing a SOA approach, such systems can position themselves to stress the importance of well-defined, highly inter-operable interfaces.<ext><name>ref</name><attr/><inner>Bieberstein et al., Service-Oriented Architecture (SOA) Compass: Business Value, Planning, and Enterprise Roadmap (The developerWorks Series) (Hardcover), IBM Press books, 2005, 978-0131870024</inner><close>&lt;/ref&gt;</close></ext>

Some<template><title>Who</title><part><name>date</name><equals>=</equals><value>January 2009</value></part></template> have questioned whether SOA simply revives concepts like modular programming (1970s), event-oriented design (1980s) or interface/component-based design (1990s)<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>February 2007</value></part></template>. SOA promotes the goal of separating users (consumers) from the service implementations. Services can therefore be run on various distributed platforms and be accessed across networks. This can also maximize reuse of services<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>February 2007</value></part></template>.

SOA realizes its business and IT benefits by utilizing an analysis and design methodology when creating services. This methodology ensures that services remain consistent with the architectural vision and roadmap and that they adhere to principles of service-orientation. Arguments supporting the business and management aspects from SOA are outlined in various publications.<ext><name>ref</name><attr/><inner>Martin van den berg et al. ''SOA for Profit, A Manager's Guide to Success with Service-Oriented Architecture'' (Hardcover), 978-9075414141</inner><close>&lt;/ref&gt;</close></ext>

A service comprises a stand-alone unit of functionality available only via a formally defined interface. Services can be some kind of &quot;nano-enterprises&quot; that are easy to produce and improve. Also services can be &quot;mega-corporations&quot; constructed as the coordinated work of subordinate services.

Services generally adhere to the following principles of service-orientation:<ext><name>ref</name><attr/><inner>M. Hadi Valipour, Bavar AmirZafari, Kh. Niki Maleki, Negin Daneshpour, [http://dx.doi.org/10.1109/ICCSIT.2009.5235004 A Brief Survey of Software Architecture Concepts and Service Oriented Architecture], in Proceedings of 2nd IEEE International Conference on Computer Science and Information Technology, ICCSIT'09, pp 34-38, Aug 2009, China.</inner><close>&lt;/ref&gt;</close></ext>

* abstraction
* autonomy
* composability
* discoverability
* formal contract
* loose coupling
* reusability
* statelessness

A mature rollout of SOA effectively defines the [[API]] of an organization.

Reasons for treating the implementation of services as separate projects from larger projects include:

# Separation promotes the concept to the business that services can be delivered quickly and independently from the larger and slower-moving projects common in the organization. The business starts understanding systems and simplified user interfaces calling on services. This advocates [[agility]]. That is to say, it fosters business innovations and speeds up time-to-market.<ext><name>ref</name><attr/><inner>Brayan Zimmerli [http://www.brayan.com/projects/BenefitsOfSOA/default.htm Business Benefits of SOA], ''University of Applied Science of Northwestern Switzerland, School of Business'', 11 November 2009</inner><close>&lt;/ref&gt;</close></ext>
# Separation promotes the decoupling of services from consuming projects. This encourages good design insofar as the service is designed without knowing who its consumers are.
# Documentation and test artifacts of the service are not embedded within the detail of the larger project. This is important when the service needs to be reused later.

An indirect benefit of SOA involves dramatically simplified testing. Services are autonomous, stateless, with fully documented interfaces, and separate from the cross-cutting concerns of the implementation. The industry<template><title>Which?</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> has never been exposed to this circumstance before.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>August 2009</value></part></template>

If an organization possesses appropriately defined test data, then a corresponding stub is built that reacts to the test data when a service is being built. A full set of regression tests, scripts, data, and responses is also captured for the service. The service can be tested as a 'black box' using existing stubs corresponding to the services it calls. Test environments can be constructed where the primitive and out-of-scope services are stubs, while the remainder of the mesh is test deployments of full services. As each interface is fully documented with its own full set of regression test documentation, it becomes simple to identify problems in test services. Testing evolves to merely validate that the test service operates according to its documentation, and finds gaps in documentation and test cases of all services within the environment. Managing the data state of [[idempotent]] services is the only complexity.

Examples may prove useful to aid in documenting a service to the level where it becomes useful. The documentation of some APIs within the Java Community Process provide good examples. As these are exhaustive, staff would typically use only important subsets. The 'ossjsa.pdf' file within JSR-89 exemplifies such a file.<ext><name>ref</name><attr/><inner>https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=7854-oss_service_activation-1.0-fr-spec-oth-JSpec@CDS-CDS_Developer — JSR-89 Spec download</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="13">===Challenges in adopting SOA===</h>

One obvious and common challenge faced involves managing '''services [[metadata]]'''<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>February 2007</value></part></template>. SOA-based environments can include many services that exchange messages to perform tasks. Depending on the design, a single application may generate millions of messages. Managing and providing information on how services interact can become complex. This becomes even more complicated when these services are delivered by different organizations within the company or even different companies (partners, suppliers, etc.). This creates huge trust issues across teams; hence SOA Governance comes into the picture.

Another challenge involves the '''lack of testing''' in SOA space. There are no sophisticated tools that provide testability of all headless services (including message and database services along with web services) in a typical architecture. Lack of horizontal trust requires that both producers and consumers test services on a continuous basis. SOA's main goal is to deliver ''agility to businesses''<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template>. Therefore it is important to invest in a testing framework (build it or buy it) that would provide the visibility required to find the culprit in the architecture. [[Business agility]] requires SOA services to be controlled by the business goals and directives as defined in the [[business motivation model]] (BMM).<ext><name>ref</name><attr/><inner>[http://www.jot.fm/issues/issue_2008_11/column6/index.html From the Business Motivation Model(BMM) to SOA, Journal Of Object Technology – November/December 2008]</inner><close>&lt;/ref&gt;</close></ext>

Another challenge relates to providing '''appropriate levels of security'''. Security models built into an application may no longer suffice when an application exposes its capabilities as services that can be used by other applications. That is, application-managed security is not the right model for securing services. A number of new technologies and standards have started<template><title>When</title><part><name>date</name><equals>=</equals><value>March 2010</value></part></template> to emerge and provide more appropriate models for [[SOA Security|security in SOA]].

Finally, the impact of changing a service that touches multiple business domains will require a '''higher level of change management governance'''  <ext><name>ref</name><attr/><inner>[http://www.servicetechmag.com/I51/0611-4 Philip Wik, Confronting SOA's Four Horsemen of the Apocalypse, Service Technology Magazine, June 17, 2011]</inner><close>&lt;/ref&gt;</close></ext>

As SOA and the [[List of Web service specifications|WS-* specifications]] practitioners expand, update and refine their output, they encounter a '''shortage of skilled people''' to work on SOA-based systems, including the integration of services and construction of services infrastructure.

'''Interoperability''' becomes an important aspect of SOA implementations. The WS-I organization has developed [[Basic Profile]] (BP) and [[Basic Security Profile]] (BSP) to enforce compatibility.<ext><name>ref</name><attr/><inner>[http://www.ws-i.org/Profiles/BasicProfile-1.0-2004-04-16.html WS-I Basic Profile]</inner><close>&lt;/ref&gt;</close></ext> WS-I has designed testing tools to help assess whether web services conform to WS-I profile guidelines. Additionally, another charter has been established to work on the Reliable Secure Profile.

Significant '''vendor hype''' surrounds SOA, which can create exaggerated expectations. Product stacks continue to evolve as early adopters test the development and runtime products with real-world problems. SOA does not guarantee reduced IT costs, improved systems agility or shorter time to market. Successful SOA implementations may realize some or all of these benefits depending on the quality and relevance of the system architecture and design.<ext><name>ref</name><attr/><inner>[http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9001155&amp;source=NLT_ROI&amp;nlid=44 Is There Real Business Value Behind the Hype of SOA?], ''Computerworld'', June 19, 2006.</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>See also: [[WS-MetadataExchange]] [[OWL-S]]
</inner><close>&lt;/ref&gt;</close></ext>

Internal IT delivery organizations routinely initiate SOA efforts, and some do a poor job of introducing SOA concepts to a business<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> with the result that SOA remains misunderstood<template><title>By whom</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> within that business. The adoption of SOA starts to meet IT delivery needs instead of those of the business, resulting in an organization with, for example, superlative laptop provisioning services, instead of one that can quickly respond to market opportunities. Business [[leadership]] also frequently becomes convinced that the organization is executing well on SOA.

One of the most important benefits of SOA is its ease of reuse. Therefore accountability and funding models must ultimately evolve within the organization.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> A [[business unit]] needs to be encouraged to create services that other units will use. Conversely, units must be encouraged to reuse services. This requires a few new governance components:

* Each business unit creating services must have an appropriate support structure in place to deliver on its [[service level|service-level]] obligations, and to support enhancing existing services strictly for the benefit of others. This is typically quite foreign to business [[leader]]s.
* Each business unit consuming services accepts the apparent risk of reusing services outside their own control, with the attendant external project dependencies, etc.
* An innovative funding model is needed as incentive to drive these behaviors above.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> Business units normally pay the IT organization to assist during projects and then to operate the environment. Corporate incentives should discount these costs to service providers and create internal revenue streams from consuming business units to the service provider.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> These streams should be less than the costs of a consumer simply building it the old-fashioned way. This is where SOA deployments can benefit from the [[Software as a service|SaaS]] monetization architecture.<ext><name>ref</name><attr/><inner>[http://cloudcomputing.sys-con.com/?q=node/1047073 The Overlapping Worlds of SaaS and SOA]</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="14">=== Criticisms of SOA===</h>

Some criticisms<ext><name>ref</name><attr/><inner>Tim Bray, XML co-founder – http://blogs.zdnet.com/service-oriented/?p=597</inner><close>&lt;/ref&gt;</close></ext> of SOA depend on conflating SOA with [[Web services]]. For example, some critics<template><title>Who</title><part><name>date</name><equals>=</equals><value>June 2008</value></part></template> claim SOA results in the addition of XML layers, introducing XML parsing and composition. In the absence of native or binary forms of [[remote procedure call]] (RPC), applications could run slower and require more processing power, increasing costs. Most implementations do incur these overheads, but SOA can be implemented using technologies (for example, [[Java Business Integration]] (JBI) and [[data distribution service]] (DDS)) that do not depend on remote procedure calls or translation through XML. At the same time, emerging open-source XML parsing technologies (such as [[VTD-XML]]) and various XML-compatible binary formats promise to significantly improve SOA performance.<ext><name>ref</name><attr/><inner>[http://xml.sys-con.com/read/453082.htm Index XML documents with VTD-XML]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>[http://soa.sys-con.com/read/250512.htm The Performance Woe of Binary XML]</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>[http://www.devx.com/xml/Article/36379 Manipulate XML Content the Ximple Way]</inner><close>&lt;/ref&gt;</close></ext>

Stateful services require both the consumer and the provider to share the same consumer-specific context, which is either included in or referenced by messages exchanged between the provider and the consumer. This constraint has the drawback that it could reduce the overall scalability of the service provider if the service-provider needs to retain the shared context for each consumer. It also increases the coupling between a service provider and a consumer and makes switching service providers more difficult.<ext><name>ref</name><attr/><inner>{{cite web
| url=http://www.jpmorgenthal.com/morgenthal/index.php?entry=entry090619-132732
| title=The Reason SOA Isn’t Delivering Sustainable Software
| date=2009-06-19
| publisher=jpmorgenthal.com
| accessdate=2009-06-27}}</inner><close>&lt;/ref&gt;</close></ext> Ultimately, some critics feel that SOA services are still too constrained by applications they represent.<ext><name>ref</name><attr/><inner>{{cite web
| url=http://blogs.zdnet.com/service-oriented/?p=2306
| title=SOA services still too constrained by applications they represent
| date=2009-06-27
| publisher=zdnet.com
| accessdate=2009-06-27}}</inner><close>&lt;/ref&gt;</close></ext>

Another concern relates to the ongoing evolution of WS-* standards and products (e.&amp;nbsp;g., transaction, security), and SOA can thus introduce new risks unless properly managed and estimated with additional budget and contingency for additional [[proof-of-concept]] work.

Some critics<template><title>Who</title><part><name>date</name><equals>=</equals><value>June 2008</value></part></template> regard SOA as merely an obvious evolution of <template><title>As of </title><part><name index="1"/><value> 2009 </value></part><part><name> alt </name><equals>=</equals><value> currently</value></part></template> well-deployed architectures (open interfaces, etc.).

IT system designs sometimes overlook the desirability of modifying systems readily. Many systems, including SOA-based systems, hard-code the operations, goods and services of the organization, thus restricting their online service and business agility in the global marketplace.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>March 2009</value></part></template>

The next<template><title>Which?</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> step in the design process covers the definition of a service delivery platform (SDP) and its implementation. In the SDP design phase one defines the business information models, identity management, products, content, devices, and the end-user service characteristics, as well as how agile the system is so that it can deal with the evolution of the business and its customers.

<h level="3" i="15">===SOA Manifesto===</h>
In October 2009, at the ''2nd International SOA Symposium'', a mixed group of 17 independent SOA practitioners and vendors, the &quot;SOA Manifesto Working Group&quot;, announced the publication of the SOA Manifesto.<ext><name>ref</name><attr> name='SOAManifesto'</attr><inner>[http://www.soa-manifesto.org SOA Manifesto Official Website] Date Accessed: 02 October 2010.</inner><close>&lt;/ref&gt;</close></ext> The SOA Manifesto is a set of objectives and guiding principles that aim to provide a clear understanding and vision of SOA and service-orientation.
Its purpose is rescuing the SOA concept from an excessive use of the term by the vendor community and &quot;a seemingly endless proliferation of misinformation and confusion&quot;. [http://www.soa-manifesto.org/aboutmanifesto.html]

The manifesto provides a broad definition of SOA, the values it represents for the signatories and some guiding principles. The manifesto prioritizes:
* Business value over technical strategy
* Strategic goals over project-specific benefits
* Intrinsic interoperability over custom integration
* Shared services over specific-purpose implementations
* Flexibility over optimization
* Evolutionary refinement over pursuit of initial perfection

As of September 2010, the SOA Manifesto had been signed by more than 700 signatories and had been translated to nine languages.

<h level="2" i="16">==Roadmap==</h>
<template lineStart="1"><title>Unreferenced section</title><part><name>date</name><equals>=</equals><value>March 2010</value></part></template>
The roadmap to SOA involves:

* Understanding the industry specific end state for the first iteration
* Gather the current state of business process maintenance, applications, integrations, security, master data and governance
* Reducing the SOA readiness gap between various entities

The various entities would be in one of the SOA readiness states.

<h level="3" i="17">===Business process maintenance===</h>

* Ad-hoc: processes are defined as and when needed
* Documented: business steps are documented in disparate documents
* Structured: process management tools used albeit disconnected
* Services: processes designed as services through standardized process management tool

<h level="3" i="18">===Integration===</h>

* Point to point: applications directly interface with required parties
* Loosely coupled: some applications use an intermediary that abstracts the interface
* Static services: services available but bound to other Static Applications
* Dynamic binding: static services bound in a dynamic way through [[Publish/subscribe|Pub-Sub]]
* Dynamic services: services that can dynamically sense when they are required and respond 
appropriately.

<h level="3" i="19">===Applications===</h>

* Standalone: applications requiring large interface efforts
* Service-wrapped: application(s) wrapped as a service
* Exposed APIs: applications have service based API's
* Exposed services: this makes the applications reusable
* Dynamic discovery: applications can be discovered by other applications

<h level="3" i="20">===Security===</h>

* Application level authentication and authorization: every application is accessed in its own [[Silo_(disambiguation)|silo]]<template><title>Which?</title><part><name>date</name><equals>=</equals><value>August 2011</value></part></template>
* Loose authentication control: some applications are on [[LDAP]]
* Tight directory-controlled authentication: [[SSO]]-enabled across most applications
* Centrally controlled identity and access management

<h level="3" i="21">===Master data===</h>

* Application-controlled: all applications control their master data
* Partial sharing: some applications share master data but not all masterdata
* Centralized master-data maintenance: most master data is shared and maintained through some MDM implementation

<h level="2" i="22">==Extensions==</h>
<h level="3" i="23">===SOA, Web 2.0, services over the messenger, and mashups===</h>

[[Web 2.0]], a perceived &quot;second generation&quot; of web activity, primarily features the ability of visitors to contribute information for collaboration and sharing. Web 2.0 applications often use [[REST]]-ful web services and commonly feature [[Ajax (programming)|AJAX]] based user interfaces, utilizing [[web syndication]], [[blogs]], and [[wikis]]. While there are no set standards for Web 2.0, it is characterized by building on the existing Web server architecture and using services. Web 2.0 can therefore be regarded as displaying some SOA characteristics.<ext><name>ref</name><attr/><inner>Dion Hinchcliffe [http://web2.wsj2.com/is_web_20_the_global_soa.htm Is Web 2.0 The Global SOA?], ''SOA Web Services Journal'', 28 October 2005
</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr> name=&quot;sch&quot;</attr></ext><ext><name>ref</name><attr/><inner>
{{cite journal | url=http://www.alexandria.unisg.ch/publications/44891| title=Enterprise Mashups: Design Principles towards the Long Tail of User Need | accessdate=2008-07-08 | author=Hoyer, Volker ; Stanoesvka-Slabeva, Katarina; Janner, Till; Schroth, Christoph; | publisher=Proceedings of the 2008 IEEE International Conference on Services Computing (SCC 2008) | year=2008}}</inner><close>&lt;/ref&gt;</close></ext>

Some commentators<template><title>Who</title><part><name>date</name><equals>=</equals><value>October 2008</value></part></template> also regard [[mashup (web application hybrid)|mashup]]s as Web 2.0 applications. The term &quot;[[Business Mashups]]&quot; has been coined<template><title>By whom</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> to describe web applications that combine content from more than one source into an integrated [[user experience]] that shares many of the characteristics of service-oriented business applications (SOBAs). SOBAs are applications composed of services in a declarative manner. There is ongoing debate about &quot;the collision of Web 2.0, mashups, and SOA,&quot; with some stating that Web 2.0 applications are a realization of SOA composite and business applications.<ext><name>ref</name><attr/><inner>Jason Bloomberg [http://www.zapthink.com/report.html?id=ZAPFLASH-2006320 Mashups and SOBAs: Which is the Tail and Which is the Dog?], ''Zapthink''</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="24">===Web 2.0===</h>

[[Tim O'Reilly]] coined the term &quot;[[Web 2.0]]&quot; to describe a perceived, quickly-growing set of web-based applications.<ext><name>ref</name><attr/><inner>{{cite web |url=http://www.oreillynet.com/pub/a/oreilly/tim/news/2005/09/30/what-is-web-20.html |title=What Is Web 2.0 |accessdate=2008-06-10 |publisher=Tim O'Reilly |date=2005-09-30 }}</inner><close>&lt;/ref&gt;</close></ext> A topic that has experienced extensive coverage involves the relationship between Web 2.0 and Service-Oriented Architectures (SOAs). SOA is considered<template><title>By whom</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> as the philosophy of encapsulating application logic in services with a uniformly defined interface and making these publicly available via discovery mechanisms. The notion of complexity-hiding and reuse, but also the concept of loosely coupling services has inspired researchers to elaborate on similarities between the two philosophies, SOA and Web 2.0, and their respective applications. Some argue Web 2.0 and SOA have significantly different elements and thus can not be regarded “parallel philosophies”, whereas others consider the two concepts as complementary and regard Web 2.0 as the global SOA.<ext><name>ref</name><attr> name=&quot;sch&quot;</attr><inner>{{cite journal | url=http://www.alexandria.unisg.ch/Publikationen/37270| title=Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services | accessdate=2008-02-23 | author=Schroth, Christoph ; Janner, Till; | publisher=IT Professional 9 (2007), Nr. 3, pp. 36-41, IEEE Computer Society | year=2007}}</inner><close>&lt;/ref&gt;</close></ext>

The philosophies of Web 2.0 and SOA serve different user needs and thus expose differences with respect to the design and also the technologies used in real-world applications. However, <template><title>As of</title><part><name index="1"/><value>2008</value></part><part><name>lc</name><equals>=</equals><value>y</value></part></template>, use-cases demonstrated the potential of combining technologies and principles of both Web 2.0 and SOA.<ext><name>ref</name><attr> name=&quot;sch&quot; </attr></ext>

In an &quot;[[Internet of Services]]&quot;, all people, machines, and goods will have access via the network infrastructure of tomorrow.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> The Internet will thus offer services for all areas of [[personal life|life]] and business, such as virtual insurance, online banking and music, and so on. Those services will require a complex services infrastructure including service-delivery platforms bringing together demand and supply. Building blocks for the Internet of Services include SOA, Web 2.0 and semantics on the technology side; as well as novel business models, and approaches to systematic and community-based innovation.<ext><name>ref</name><attr/><inner>{{cite journal | url=http://csdl2.computer.org/comp/proceedings/wetice/2007/2879/00/28790003.pdf| title=Internet of Services—A SAP Research Vision| accessdate=2008-02-23 | author=Ruggaber, Rainer; | publisher= IEEE Computer Society | year=2007}}</inner><close>&lt;/ref&gt;</close></ext>

Even though Oracle indicates<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template> that [[Gartner]] is coining a new term, Gartner analysts indicate that they call this '''advanced SOA''' and refer to it as [[Event-driven SOA|&quot;SOA 2.0&quot;]].<ext><name>ref</name><attr/><inner>Yefim Natis &amp; Roy Schulte [http://www.gartner.com/DisplayDocument?ref=g_search&amp;id=493863 Advanced SOA for Advanced Enterprise Projects], ''Gartner'', July 13, 2006</inner><close>&lt;/ref&gt;</close></ext> Most of the major [[middleware]] vendors (e.&amp;nbsp;g., [[Red Hat]], [[webMethods]], [[TIBCO Software]], [[IBM]], [[Sun Microsystems]], and [[Oracle Corporation|Oracle]]) have had some form of SOA 2.0 attributes for years.<template><title>Citation needed</title><part><name>date</name><equals>=</equals><value>October 2009</value></part></template>

<h level="3" i="25">===Digital nervous system===</h>

SOA implementations have been described as representing a piece of the larger vision known as the [[digital nervous system]] <ext><name>ref</name><attr/><inner>{{cite web | url=http://www.ebizq.net/blogs/soainaction/2008/02/from_web_to_boarding_area_delt.php | title=From Web to Boarding Area: Delta's SOA is Ready |accessdate=2009-05-02}}</inner><close>&lt;/ref&gt;</close></ext><ext><name>ref</name><attr/><inner>{{cite web | url=http://www.dabcc.com/article.aspx?id=10100| title=The Value of An Enterprise Architecture | accessdate=2009-05-02}}</inner><close>&lt;/ref&gt;</close></ext> or the Zero Latency Enterprise.<ext><name>ref</name><attr/><inner>{{cite web | url=http://soa.sys-con.com/node/39849|title=Moving Toward the Zero Latency Enterprise |accessdate=2009-05-02}}</inner><close>&lt;/ref&gt;</close></ext>

<h level="3" i="26">=== Lean SOA ===</h>

A methodology to developing SOA employing Lean Software Development principles.<ext><name>ref</name><attr/><inner>{{cite web | url=http://www.manageability.org/blog/stuff/lean-soa | title=Lean Development Applied to SOA | accessdate=2010-08-16 }}</inner><close>&lt;/ref&gt;</close></ext>

<h level="2" i="27">==See also==</h>
<template lineStart="1"><title>col-begin</title></template>
<template lineStart="1"><title>col-2</title></template>
*[[Amazon Web Services]]
* [[Business-Agile Enterprise]]
* [[Business-driven development]]
* [[Business Intelligence 2.0]] (BI 2.0)
* [[Cloud Computing]]
* [[Communications-enabled application]] (CEA)
* [[Comparison of business integration software]]
* [[Component business model]]
* [[Enterprise application integration]]
* [[Enterprise Integration Patterns]]
* [[Enterprise Messaging System]]
* [[Enterprise service bus]]
* [[EMML]]
* [[Event-driven programming]]
* [[Event-driven SOA]]
* [[Integration Objects]]
* [[Itko|iTKO LISA]]
* [[Java Business Integration]]
* [[Microsoft Connected Services Framework]]
* [[Open ESB]]
<template lineStart="1"><title>col-2</title></template>
<template lineStart="1"><title>Commons category</title><part><name index="1"/><value>Service-oriented architecture</value></part></template>
* [[Oracle SOA Suite]]
* [[Soatest|Parasoft SOAtest]]
* [[Platform as a Service]]
* [[Representational State Transfer]]
* [[Resource oriented architecture]]
* [[SAP Enterprise Services Architecture]]
* [[Search oriented architecture]] - complementary pattern
* [[Semantic service oriented architecture]] – contain [[ISO standards]]
* [[Service component architecture]]
* [[Service layer]]
* [[Service-oriented analysis and design]]
* [[Service-oriented architecture implementation framework]]
* [[Service-oriented modeling]]
* [[service-oriented_modeling#Service-oriented_modeling_framework_(SOMF)|Service-oriented modeling framework (SOMF)]]
* [[SOA Governance]]
* [[SOA Security]]
* [[SOALIB]]
* [[webMethods|Software AG webMethods]]
* [[Software as a service]]
* [[Sun Java CAPS]]
* [[Web Oriented Architecture]]
<template lineStart="1"><title>col-end</title></template>

<h level="2" i="28">==External links==</h>
<template lineStart="1"><title>Spoken Wikipedia</title><part><name index="1"/><value>En-Service-oriented_architecture.ogg</value></part><part><name index="2"/><value>2011-04-11</value></part></template>
* ''[[InfoWorld]]'' magazine provides a [http://www.infoworld.com/d/architecture/infoclipz-service-oriented-architecture-soa-899 3-minute video] explaining SOA and how it works
* [http://www.infoq.com/presentations/Beginning-an-SOA-Initiative Recommendations for beginning an SOA initiative] by Ian Robinson (video)
* [http://www.infoq.com/presentations/mark-little-soa-rest The pros and cons of using SOAP/WSDL/WS-* and REST for SOA] by Mark Little (video)
* [http://www.infoq.com/interviews/robinson-rest-ws-soa-implementation Technology choices and business ramifications around implementing an SOA], an interview with Ian Robinson (video)
* [http://www.networkworld.com/news/2007/071907-burning-question.html Service-oriented architecture's 6 burning questions]

<h level="2" i="29">==References==</h>
<template lineStart="1"><title>reflist</title></template>

<template lineStart="1"><title>Software Engineering</title></template>

<template lineStart="1"><title>DEFAULTSORT:Service-Oriented Architecture</title></template>
[[Category:Enterprise application integration]]
[[Category:Service-oriented (business computing)]]
[[Category:Web services]]

[[af:Diensgeoriënteerde argitektuur]]
[[ar:البنية الخدمية]]
[[bg:SOA]]
[[ca:SOA]]
[[da:Serviceorienteret arkitektur]]
[[de:Serviceorientierte Architektur]]
[[es:Arquitectura orientada a servicios]]
[[fa:معماری سرویس‌گرا]]
[[fr:Architecture orientée services]]
[[ko:서비스 지향 아키텍처]]
[[id:SOA]]
[[it:Service-oriented architecture]]
[[he:ארכיטקטורה מוכוונת שירותים]]
[[lv:Servisu orientētā arhitektūra]]
[[hu:Szolgáltatásorientált architektúrák]]
[[nl:Service-oriëntatie]]
[[ja:サービス指向アーキテクチャ]]
[[no:Tjenesteorientert arkitektur]]
[[pl:Architektura zorientowana na usługi]]
[[pt:Service-oriented architecture]]
[[ro:SOA]]
[[ru:Сервис-ориентированная архитектура]]
[[fi:Palvelukeskeinen arkkitehtuuri]]
[[sv:Tjänsteorienterad arkitektur]]
[[ta:சேவை சார் கட்டமைப்பு]]
[[th:Service-oriented architecture]]
[[tr:Servis odaklı mimari]]
[[uk:Сервісно-орієнтована архітектура]]
[[zh:面向服务的架构]]</root>