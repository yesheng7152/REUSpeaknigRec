{{About|the scripting language}}
{{too technical|date=November 2011}}
{{Infobox programming language
 | name                   =PHP
 | logo                   = [[File:PHP-logo.svg|frameless|PHP]]
 | caption                =PHP: Hypertext Preprocessor
 | file ext               = .php, .phtml .php4 .php3 .php5 .phps
 | paradigm               = [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]], [[procedural programming|Procedural]], [[Reflective programming|reflective]]
 | released               = {{start date and age|1995}}<ref name="mysqlconference">Rasmus Lerdorf began assembling C code originally written for CGI scripts into a library and accessing the library's functions, including SQL queries, through HTML-embedded commands in 1994;  {{cite web | last=Lerdorf | first=Rasmus | title=PHP on Hormones - history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California | date=2007-04-26 | accessdate=2009-12-11 | publisher=The Conversations Network | format=mp3 | url=http://itc.conversationsnetwork.org/shows/detail3298.html# | quote=Every day I would change the language drastically, and it didn't take very long, so by 1995, mid-1995 or so, PHP looked like [http://talks.php.net/show/mysql07key/4 this]. This isn't that far from what PHP looks like today, actually.}}</ref>
 | designer               = [[Rasmus Lerdorf]]
 | developer              = [[The PHP Group]]
 | latest release version = 5.3.8
 | latest release date    = {{start date and age|2011|8|23}}
 | latest preview version = 5.4RC1
 | latest preview date    = {{Release date|mf=yes|2011|11|11}}
 | typing                 = [[Dynamic typing|Dynamic]], [[weak typing|weak]]
 | implementations        = [[Zend Engine]], [[Phalanger (compiler)|Phalanger]], [[Quercus (software)|Quercus]], [[Project Zero]], [[HipHop (computing)|HipHop]]
 | dialects               =
 | influenced by          = [[C (programming language)|C]], [[Perl]], [[Java (programming language)|Java]], [[C++ (programming language)|C++]], [[Tcl]]<ref name=mysqlconference/>
 | programming language   = [[C (programming language)|C]]
 | operating system       = [[Cross-platform]]
 | license                = [[PHP License]]
 | website                = {{URL|http://www.php.net}}
 | wikibooks              = PHP Programming
}}

'''PHP''' is a general-purpose server-side [[scripting language]] originally designed for [[web development]] to produce [[dynamic web page]]s.  For this purpose, PHP code is embedded into the [[HTML]] source document and interpreted by a [[web server]] with a PHP processor module, which generates the [[web page]] document. It also has evolved to include a [[command-line interface]] capability and can be used in [[Standalone software|standalone]] [[Graphical user interface|graphical applications]].<ref>{{cite web | url = http://www.php.net/manual/en/intro-whatcando.php | work = PHP Manual | title = Introduction: What can PHP do? | accessdate = 2009-03-05 }}</ref> PHP can be deployed on most web servers and as a standalone interpreter, on almost every [[operating system]] and [[Platform (computing)|platform]] free of charge.<ref name="foundations" /> There is also commercial software such as [[RadPHP]], a [[rapid application development]] [[Software framework|framework]] for the PHP language. A competitor to [[Microsoft]]'s [[Active Server Pages]] (ASP) server-side script engine<ref>{{cite web|url=http://www.w3schools.com/php/default.asp|title=PHP Tutorial|accessdate=2011-05-28}}</ref> and similar languages, PHP is installed on more than 20 million websites and 1 million [[web server]]s.<ref>{{cite web|url=http://www.php.net/usage.php|title=Usage Stats for April 2007|accessdate=2008-07-07}}</ref>

PHP was originally created by [[Rasmus Lerdorf]] in 1995. The main implementation of PHP is now produced by [[The PHP Group]] and serves as the [[de facto standard|''de facto'' standard]] for PHP as there is no [[formal specification]].<ref name="about PHP">{{cite web|accessdate=2008-02-25|url=http://www.php.net/history|title=History of PHP and related projects |publisher=The PHP Group }}</ref> PHP is [[free software]] released under the [[PHP License]] which is incompatible with the [[GNU General Public License]] (GPL) due to restrictions on the usage of the term ''PHP''.<ref>{{cite web | title = GPL-Incompatible, Free Software Licenses | url = http://www.fsf.org/licensing/licenses/index_html#GPLIncompatibleLicenses | work = Various Licenses and Comments about Them | publisher = Free Software Foundation|accessdate=2008-02-22 }}</ref>

While PHP originally stood for "Personal Home Page", it is now said to stand for "PHP: [[Hypertext Preprocessor]]", a [[recursive acronym]].<ref>[http://us.php.net/manual/en/faq.general.php PHP.net General FAQ]</ref>

==History==
{{triple image|left|Rasmus_Lerdorf_cropped.jpg|100|Andi Gutmans 1.jpg|100|Zeev Suraski 2005_cropped.jpg | 100 |[[Rasmus Lerdorf]], who wrote the original [[Common Gateway Interface]] component, and [[Andi Gutmans]] and [[Zeev Suraski]], who rewrote the [[parser]] that formed PHP 3}}<!-- MOS says no-no to squeezing text between two graphics. -->

PHP development began in 1994 when the [[Danish people|Danish]]/[[Greenland]]ic/[[Canada|Canadian]] programmer [[Rasmus Lerdorf]] initially created a set of [[Perl]] scripts he called "Personal Home Page Tools" to maintain his [[personal homepage]]. The scripts performed tasks such as displaying his résumé and recording his web-page  [[web traffic|traffic]].<ref name="about PHP"/><ref>
{{cite web
|url=http://itc.conversationsnetwork.org/shows/detail3298.html
|title=PHP on Hormones
|format=mp3
|last=Lerdorf
|first=Rasmus
|publisher=The Conversations Network
|date=2007-04-26
|accessdate=2009-06-22}}
</ref><ref>
{{cite web
|url=http://talks.php.net/show/mysql07key/3
|title=Slide 3
|work=slides for 'PHP on Hormones' talk
|last=Lerdorf
|first=Rasmus
|publisher=The PHP Group
|year=2007
|accessdate=2009-06-22 }}</ref> Lerdorf initially announced the release of PHP on the comp.infosystems.www.authoring.cgi [[Usenet]] discussion group on June 8, 1995.<ref>{{cite web|url=http://groups.google.com/group/comp.infosystems.www.authoring.cgi/msg/cc7d43454d64d133?pli=1|title=Announce: Personal Home Page Tools (PHP Tools)|last=Lerdorf|first=Rasmus|date=June 8, 1995|accessdate=7 June 2011}}</ref>

[[Zeev Suraski]] and [[Andi Gutmans]], two [[Israel]]i developers at the [[Technion IIT]], rewrote the [[parser]] in 1997 and formed the base of PHP 3, changing the language's name to the [[recursive initialism]] ''PHP: Hypertext Preprocessor''.<ref name="about PHP"/> Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new [[rewrite (programming)|rewrite]] of PHP's core, producing the [[Zend Engine]] in 1999.<ref>{{cite web | title = [[Zend Engine]] version 2.0: Feature Overview and Design | publisher = [[Zend]] Technologies Ltd. | url = http://www.zend.com/zend/zend-engine-summary.php | accessdate = 2006-09-17 }} {{Dead link|date=October 2010|bot=H3llBot}}</ref> They also founded [[Zend Technologies]] in [[Ramat Gan]], Israel.<ref name="about PHP"/>

In 2008 PHP 5 became the only stable version under development. [[Late static binding]] had been missing from PHP and was added in version 5.3.<ref>{{cite web|url=http://www.digitalsandwich.com/archives/53-Late-Static-Binding-in-PHP.html|accessdate=2008-03-25|title=Late Static Binding in PHP|date=2006-02-23|publisher=Digital Sandwich}}</ref><ref>{{cite web|accessdate=2008-03-25|url=http://www.php.net/language.oop5.static|title=Static Keyword|publisher=The PHP Group}}</ref>

A new major version has been under development alongside PHP 5 for several years. This version was originally planned to be released as PHP 6 as a result of its significant changes, which included plans for full Unicode support. However, Unicode support took developers much longer to implement than originally thought, and the decision was made in March 2010<ref>{{cite web|accessdate=2010-03-27|url=http://news.php.net/php.internals/47120|title=PHP 6|publisher=The PHP project}}</ref> to move the project to a branch, with features still under development moved to [[Trunk (software)|trunk]].

Changes in the new code include the removal of <code>register_globals</code>,<ref>{{cite web|accessdate=2008-04-04|url=http://www.php.net/register_globals|title=Using Register Globals|publisher=PHP}}</ref> [[magic quotes]], and [[Safe mode#Application software safe mode|safe mode]].<ref name="2007 news">{{cite web|title=php.net 2007 news archive|url=http://www.php.net/archive/2007.php|publisher=The PHP Group|accessdate=2008-02-22|date=2007-07-13}}</ref><ref>{{cite web|accessdate=2008-03-24|url=http://www.corephp.co.uk/archives/19-Prepare-for-PHP-6.html|title=Prepare for PHP 6 |publisher=CorePHP|date=2005-11-23 }}</ref> The reason for the removals was that register_globals had opened security holes by intentionally allowing runtime data injection, and the use of magic quotes had an unpredictable nature. Instead, to escape characters, magic quotes may be replaced with the addslashes() function, or more appropriately an escape mechanism specific to the database vendor itself like mysql_real_escape_string() for [[MySQL]]. Functions that will be removed in future versions and have been deprecated in PHP 5.3 will produce a warning if used.<ref>{{cite web|accessdate=2009-07-03|url=http://www.php.net/migration53|title=PHP 5.3 migration guide|publisher=The PHP project}}</ref>

Many high-profile open-source projects ceased to support PHP 4 in new code as of February 5, 2008, because of the GoPHP5 initiative,<ref name="gophp5_projects">{{cite web | url=http://www.gophp5.org/projects|title=GoPHP5 }}</ref> provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.<ref name="gophp5">{{cite web |url=http://gophp5.org/sites/gophp5.org/files/press_release.pdf |format=PDF |title=PHP projects join forces to Go PHP 5 |accessdate=2008-02-23 |work=GoPHP5 Press Release |author=GoPHP5}}</ref><ref>{{cite web|url=http://gophp5.org/|title=GoPHP5|publisher=GoPHP5|accessdate=2008-02-22}}</ref>

{{As of | 2011}} PHP does not have native support for [[Unicode]] or multibyte strings; Unicode support is under development for a future version of PHP and will allow strings as well as class-, method-, and function-names to contain non-[[ASCII]] characters.<ref>{{cite web
|url=http://www.php.net/~derick/meeting-notes.html#unicode
|title=Unicode
|accessdate=2008-03-25
|publisher=The PHP Group}}
</ref><ref>{{cite web
|url=http://www.linux.com/archive/feature/60386
|title=Upcoming PHP release will offer Unicode support
|last=Byfield
|first=Bruce
|date=February 28, 2007
|publisher=linux.com
|accessdate=2009-06-23}}
</ref>

PHP interpreters are available on both [[32-bit]] and [[64-bit]] operating systems, but on [[Microsoft Windows]] the only official distribution is a 32-bit implementation, requiring Windows 32-bit compatibility mode while using [[Internet Information Services]] (IIS) on a 64-bit Windows platform. Experimental 64-bit versions of PHP 5.3.0 were briefly available for MS Windows, but have since been removed.<ref>{{cite web | url=http://windows.php.net/snapshots/|title=PHP For Windows snapshots|accessdate=2009-05-25|work=PHP Windows Development Team|author=The PHP Group}}</ref>

===Licensing===
PHP is [[free software]] released under the [[PHP License]], which insists that:<ref>{{cite web|url=http://www.php.net/license/3_01.txt |title=The PHP License, version 3.01 |date= |accessdate=2010-05-20}}</ref>
  4. Products derived from this software may not be called "PHP", nor
     may "PHP" appear in their name, without prior written permission
     from group@php.net.  You may indicate that your software works in
     conjunction with PHP by saying "Foo for PHP" instead of calling
     it "PHP Foo" or "phpfoo"

This restriction on use of the name ''PHP'' makes it incompatible with the [[GNU General Public License]] (GPL).<ref>{{cite web | title = GPL-Incompatible, Free Software Licenses | url = http://www.gnu.org/licenses/license-list.html#GPLIncompatibleLicenses | work = Various Licenses and Comments about Them | publisher = Free Software Foundation|accessdate=2011-01-03 }}</ref>

===Release history===
{| class="wikitable"
|-
!
! Meaning
|-
| style="background:salmon;" | Red
| Release no longer supported
|-
| style="background:#a0e75a;" | Green
| Release still supported
|-
| style="background:skyBlue;" | Blue
| Future release
|}

<!-- RELEASE HISTORY -->
{| class="wikitable"
|-
! Major version !! Minor version !! Release date !! Notes
|-
!1
| style="background:salmon;" | 1.0.0
|{{nowrap|1995-06-08}}
|Officially called "Personal Home Page Tools (PHP Tools)". This is the first use of the name "PHP".<ref name="about PHP"/>
|-
!2
| style="background:salmon;" | 2.0.0
|{{nowrap|1997-11-01}}
|Considered by its creator as the "fastest and simplest tool" for creating dynamic web pages.<ref name="about PHP"/>
|-
!rowspan="2"|3
| style="background:salmon;" | 3.0.0
|{{nowrap|1998-06-06}}
|Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewrite the base for this version.<ref name="about PHP"/>
|-
| style="background:salmon;" | 3.0.18 
|{{nowrap|2000-10-20}}
|The latest release for PHP 3.0.x. [http://php.net/releases/index.php Unsupported Historical Releases]
|-
!rowspan="6"|4
| style="background:salmon;" | 4.0.0
|{{nowrap|2000-05-22}}
|Added more advanced two-stage parse/execute tag-parsing system called the Zend engine.<ref name="php4changelog">{{cite web|title=PHP: PHP 4 ChangeLog|url=http://www.php.net/ChangeLog-4.php|publisher=The PHP Group|accessdate=2008-02-22|date=2008-01-03}}</ref>
|-
| style="background:salmon;" | 4.1.0
|{{nowrap|2001-12-10}}
|Introduced 'superglobals' (<code>$_GET</code>, <code>$_POST</code>, <code>$_SESSION</code>, etc.)<ref name="php4changelog" />
|-
| style="background:salmon;" | 4.2.0
|{{nowrap|2002-04-22}}
|Disabled <code>register_globals</code> by default. Data received over the network is not inserted directly into the [[Global variable|global]] namespace anymore, closing possible security holes in applications.<ref name="php4changelog" />
|-
| style="background:salmon;" | 4.3.0
|{{nowrap|2002-12-27}}
|Introduced the [[Command-line interface|CLI]], in addition to the [[Common Gateway Interface|CGI]].<ref name="php4changelog" /><ref name="phpclidocs">{{cite web|title=PHP: Using PHP from the command line - Manual:|url=http://us3.php.net/manual/en/features.commandline.php|publisher=The PHP Group|accessdate=2009-09-11}}</ref>
|-
| style="background:salmon;" | 4.4.0
|{{nowrap|2005-07-11}}
|Added man pages for <code>phpize</code> and <code>php-config</code> scripts.<ref name="php4changelog" />
|-
| style="background:salmon;" | 4.4.9
|{{nowrap|2008-08-07}}
|Security enhancements and bug fixes. The last release of the PHP 4.4 series.<ref>{{cite web|url=http://www.php.net/downloads.php#v4 |title=Downloads |publisher=PHP |date= |accessdate=2009-07-29}}</ref><ref>{{cite web|url=http://www.php.net/releases/4_4_9.php |title=4.4.9 Release Announcement |publisher=PHP |date= |accessdate=2009-07-29}}</ref>
|-
!rowspan="14"|5
| style="background:salmon;" | 5.0.0
|{{nowrap|2004-07-13}}
|Zend Engine II with a new object model.<ref name="php5changelog">{{cite web|title=PHP: PHP 5 ChangeLog|url=http://www.php.net/ChangeLog-5.php|publisher=The PHP Group|accessdate=2008-02-22|date=2007-11-08}}</ref>
|-
| style="background:salmon;" | 5.1.0
|{{nowrap|2005-11-24}}
|Performance improvements with introduction of compiler variables in re-engineered PHP Engine.<ref name="php5changelog" /> Added PHP Data Objects (PDO) as a consistent interface for accessing databases. <ref name="phpPdoDocs">{{cite web|title=PHP manual: PDO|url=http://www.php.net/manual/en/intro.pdo.php|publisher=The PHP Group|accessdate=2011-11-15|date=2011-11-15}}</ref>
|-
| style="background:salmon;" | 5.2.0
|{{nowrap|2006-11-02}}
|Enabled the filter extension by default. Native [[JSON]] support.<ref name="php5changelog" />
|-
| style="background:salmon;" | 5.2.17
|{{nowrap|2011-01-06}}
| Fix of critical vulnerability connected to floating point.
|-
| style="background:#a0e75a;" | 5.3.0
|{{nowrap|2009-06-30}}
|[[Namespace (computer science)|Namespace]] support; [[Name binding|Late static bindings]], Jump label (limited [[goto]]), Native [[Closure (computer science)|closures]], Native PHP archives (phar), [[garbage collection (computer science)|garbage collection]] for circular references, improved [[Microsoft Windows|Windows]] support, sqlite3, mysqlnd as a replacement for libmysql as underlying library for the extensions that work with [[MySQL]], fileinfo as a replacement for mime_magic for better [[MIME]] support, the Internationalization extension, and deprecation of ereg extension.
|-
| style="background:#a0e75a;" | 5.3.1
|{{nowrap|2009-11-19}}
|Over 100 [http://www.php.net/ChangeLog-5.php#5.3.1 bug fixes], some of which were security fixes.
|-
| style="background:#a0e75a;" | 5.3.2
|{{nowrap|2010-03-04}}
| Includes a large number of bug fixes.
|-
| style="background:#a0e75a;" | 5.3.3
|{{nowrap|2010-07-22}}
| Mainly bug and security fixes; [[PHP-FPM|FPM]] SAPI.
|-
| style="background:#a0e75a;" | 5.3.4
|{{nowrap|2010-12-10}}
| Mainly bug and security fixes; improvements to [[PHP-FPM|FPM]] SAPI.
|-
| style="background:#a0e75a;" | 5.3.5
|{{nowrap|2011-01-06}}
| Fix of critical vulnerability connected to floating point.
|-
| style="background:#a0e75a;" | 5.3.6
|{{nowrap|2011-03-10}}
| Over 60 bug fixes that were reported in the previous version.
|-
| style="background:#a0e75a;" | 5.3.7
|{{nowrap|2011-08-18}}
| This release focuses on improving the stability of the PHP 5.3.x branch with over 90 bug fixes, some of which are security related.
|-
| style="background:#a0e75a;" | '''5.3.8'''
|{{nowrap|2011-08-23}}
| This release fixes two issues introduced in the PHP 5.3.7 release.
|-
| style="background:#a0e75a;" | 5.4.0 RC1
|{{nowrap|2011-11-11}}
| [[Trait (computer programming)|Trait]] Support, Removed items: <code>register_globals</code>, <code>safe_mode</code>, <code>allow_call_time_pass_reference</code>, <code>session_register()</code>, <code>session_unregister()</code> and <code>session_is_registered()</code>. Several improvements to existing features.
|-
! 6
| style="background:skyBlue;" | ?.?
|No date set
|The development of PHP 6 has been delayed because the developers have decided the current approach to handling of instance unicode is not a good one, and are considering alternate ways in the next version of PHP. The updates that were intended for PHP 6 were added to PHP 5.3.0(namespace support, Late Static Bindings, lambda functions, closures, goto) and 5.4.0(traits, closure rebinding) instead.
|}

Beginning on June 28th, 2011, the PHP Group began following a timeline for when new versions of PHP will be released. <ref name="releaseprocess">{{cite web|title=PHP: Release Process|url=https://wiki.php.net/rfc/releaseprocess|accessdate=2008-02-22|date=2011-07-23}}</ref> Under this timeline, at least one release should occur every month. Every one year, a minor release should occur which can include new features. Every minor release should at least have 2 years of security and bug fixes, followed by at least 1 year of only security fixes, for a total of a 3 year release process for every minor release. No new features (unless small and self contained) will be introduced into a minor release during the 3 year release process.

==Usage==
PHP is a general-purpose scripting language that is especially suited to [[Server-side scripting|server-side]] [[web development]] where PHP generally runs on a [[web server]]. Any PHP code in a requested file is [[Execution (computing)|executed]] by the PHP runtime, usually to create [[dynamic web page]] content or dynamic images used on web sites or elsewhere.<ref>{{cite web|url=http://php.net/manual/en/book.image.php |title=PHP Manual Image Processing and GD; |publisher= php.net |date= |accessdate=2011-04-09}}</ref> It can also be used for [[command-line]] scripting and [[client-side]] [[Graphical user interface|GUI]] applications. PHP can be deployed on most [[web server]]s, many [[operating system]]s and [[Platform (computing)|platforms]], and can be used with many [[relational database management system]]s (RDBMS). It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.<ref name="foundations">{{cite web|accessdate=2008-02-25|url=http://www.onlamp.com/pub/a/php/2001/05/03/php_foundations.html|title=Embedding PHP in HTML |publisher=O'Reilly|date=2001-05-03 }}</ref>

PHP acts primarily as a [[Filter (software)|filter]],<ref>{{Wayback|url=http://web.archive.org/web/20080611231433/http://gtk.php.net/manual1/it/html/intro.whatis.php.whatdoes.html|title=|date=20080611231433}}{{Failed verification|date=April 2010}}</ref> taking input from a file or stream containing text and/or PHP instructions and outputting another stream of data; most commonly the output will be HTML. Since PHP 4, the PHP [[parser]] [[compiler|compiles]] input to produce [[bytecode]] for processing by the [[Zend Engine]], giving improved performance over its [[Interpreter (computing)|interpreter]] predecessor.<ref>{{cite web|accessdate=2008-02-25|url=http://cs.ua.edu/457/Notes/PHP%20and%20MySQL.ppt|title=PHP and MySQL |publisher=[[University of Alabama]] |archiveurl = http://web.archive.org/web/20080228003031/http://cs.ua.edu/457/Notes/PHP+and+MySQL.ppt <!-- Bot retrieved archive --> |archivedate = 2008-02-28}}</ref>

Originally designed to create dynamic web pages, PHP now focuses mainly on [[server-side scripting]],<ref>{{cite web|url=http://webmaster.iu.edu/PHPlanguage/index.shtml|title=PHP Server-Side Scripting Language|publisher=[[Indiana University]]|accessdate=2008-02-25|date=2007-04-04}}</ref> and it is similar to other server-side scripting languages that provide dynamic content from a web server to a [[client (computing)|client]], such as [[Microsoft]]'s [[ASP.NET]], [[Sun Microsystems]]' [[JavaServer Pages]],<ref>{{cite web|url=http://java.sun.com/products/jsp/jspservlet.html|title=JavaServer Pages Technology&nbsp;— JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper|publisher=Sun Microsystems|accessdate=2008-02-25}}</ref> and [[mod_perl]]<!-- DO ''not'' AUTO-CORRECT THIS. IT HAS AN UNDERSCORE DELIBERATELY. -->. PHP has also attracted the development of many [[Software framework|frameworks]] that provide building blocks and a design structure to promote [[rapid application development]] (RAD). Some of these include [[CakePHP]], [[Symfony]], [[CodeIgniter]], and [[Zend Framework]], offering features similar to other [[List of web application frameworks|web application frameworks]].

The [[LAMP (software bundle)|LAMP]] architecture has become popular in the web industry as a way of deploying web applications. PHP is commonly used as the ''P'' in this bundle alongside [[Linux]], [[Apache HTTP Server|Apache]] and [[MySQL]], although the ''P'' may also refer to [[Python (programming language)|Python]] or [[Perl]] or some combination of the three. Similar packages are also available for [[Microsoft Windows|Windows]] and [[Mac OS X]], then called [[WAMP]] and [[MAMP]], with the first letter standing for the respective operating system.

As of April 2007, over 20 million Internet domains had web services hosted on servers with PHP installed and mod_php was recorded as the most popular [[Apache HTTP Server]] module.<ref name="usage">{{cite web|title=PHP: PHP Usage Stats|url=http://www.php.net/usage.php|publisher=SecuritySpace|accessdate=2008-02-24|date=2007-04-01}}</ref>
PHP is used as the server-side programming language on 75% of all web servers.<ref name="W3Techs usage statistics">{{cite web|title=Usage of server-side programming languages for websites|url=http://w3techs.com/technologies/overview/programming_language/all|publisher=W3Techs|accessdate=2010-10-29|date=2010-10-29}}</ref> [[Web content management system]]s written in PHP include [[MediaWiki]],<ref>{{cite web|url=http://www.mediawiki.org/w/index.php?title=Manual:Installation_requirements&oldid=299556#PHP |title=Manual:Installation requirements#PHP |publisher=MediaWiki |date=2010-01-25 |accessdate=2010-02-26|quote=PHP is the programming language in which MediaWiki is written [...]}}</ref>
[[Joomla]],
[[eZ Publish]],
[[WordPress]],<ref>{{cite web|url=http://wordpress.org/about/ |title=About WordPress|accessdate=2010-02-26|quote=WordPress was [...] built on PHP}}</ref> [[Drupal]] <ref>{{cite web|url=http://drupal.org/node/176052 |title=PHP and Drupal |publisher=Drupal.org |date= |accessdate=2010-06-13}}</ref> and [[Moodle]].<ref>{{cite web|url=http://docs.moodle.org/en/About_Moodle |title=Moodle - About |publisher=Moodle.org |accessdate=2009-12-20}}</ref>
All websites created using these tools are written in PHP, including the user-facing portion of
[[Wikipedia]], [[Facebook]],<ref>{{cite web|url=http://blog.facebook.com/blog.php?post=2356432130 |title=PHP and Facebook &#124; Facebook |publisher=Blog.facebook.com |date= |accessdate=2009-07-29}}</ref>
and [[Digg]].<ref>{{cite web|url=http://www.oreillynet.com/onlamp/blog/2006/04/digg_phps_scalability_and_perf.html |title=PHP and Digg |publisher=O'Reilly |date= |accessdate=2010-06-13}}</ref>

==Security==
Vulnerabilities are caused mostly by not following best practice programming rules: technical security flaws of the language itself or of its core libraries are not frequent (23 in 2008, about 1% of the total).<ref>{{cite web|url=http://seancoates.com/security-and-driving-and-hiring |title=Security and... Driving? (and Hiring) - Sean Coates: PHP, Web (+Beer) |publisher=Sean Coates |date= |accessdate=2009-07-29}}</ref><ref>[http://www.computerworlduk.com/toolbox/open-source/blogs/index.cfm?entryid=533&blogid=14 Computerworlduk.com], Interview: Ivo Jansch, February 26, 2008</ref> Recognizing that programmers cannot be trusted, some languages include [[taint checking]] to detect automatically the lack of [[Data validation|input validation]] which induces many issues. Such a feature is being developed for PHP,<ref>{{cite web|title=PHP Taint Mode RFC|url=http://wiki.php.net/rfc/taint}}</ref> but its inclusion in a release has been rejected several times in the past.<ref>{{cite web|title=Developer Meeting Notes, Nov. 2005|url=http://www.php.net/~derick/meeting-notes.html#sand-boxing-or-taint-mode}}</ref><ref>{{cite web|title=Taint mode decision, November 2007|url=http://devzone.zend.com/article/2798-Zend-Weekly-Summaries-Issue-368#Heading1}}</ref>

Hosting PHP applications on a server requires careful and constant attention to
deal with these security risks.<ref>{{cite web|title=The Power of PHP, both Good and Evil|url=http://www.cwihosting.com/php_security.php|date=2009-02-28}}</ref> There are advanced protection patches such as [[Suhosin]] and [[Hardening (computing)|Hardening]]-Patch, especially designed for web hosting environments.<ref>{{cite web|title=Hardened-PHP Project|url=http://www.hardened-php.net|date=2008-08-15}}</ref>

[[PHPIDS]] adds security to any PHP application to defend against intrusions. PHPIDS detects [[Cross-site scripting]] (XSS), [[SQL injection]], header injection, [[Directory traversal]], Remote File Execution, [[Local File Inclusion]], [[Denial of Service]] (DoS).<ref>{{cite web|title=PHPIDS|url=http://phpids.org|date=2011-02-20}}</ref>

==Syntax==
{{Main|PHP syntax and semantics}}
<div style="float:right; margin:0 0 0 1em">
<source lang="php">
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>PHP Test</title>
  </head>
  <body>
  <?php
  echo 'Hello World';
  /* echo("Hello World"); works as well,
  although echo is not a function, but a
  language construct. In some cases, such
  as when multiple parameters are passed
  to echo, parameters cannot be enclosed
  in parentheses. */
  ?>
  </body>
</html>
</source><br />
''[[Hello world program]] in PHP code embedded within [[HTML]] code''</div>

The PHP interpreter only executes PHP code within its [[delimiter]]s. Anything outside its delimiters is not processed by PHP (although non-PHP text is still subject to [[control structures]] described within PHP code). The most common delimiters are <code><?php</code> to open and <code>?></code> to close PHP sections. <code><script language="php"></code> and <code></script></code> delimiters are also available, as are the shortened forms <code><?</code> or <code><?=</code> (which is used to echo back a [[String (computer science)|string]] or [[variable (programming)|variable]]) and <code>?></code> as well as [[Active Server Pages|ASP]]-style short forms <code><%</code> or <code><%=</code> and <code>%></code>. While short delimiters are used, they make script files less portable as support for them can be disabled in the [http://wiki.php.net/rfc/shortags PHP configuration], and so they are discouraged.<ref name="basic syntax">{{cite web|title=PHP: Basic syntax|url=http://www.php.net/manual/en/language.basic-syntax.php|publisher=The PHP Group|accessdate=2008-02-22}}</ref> The purpose of all these delimiters is to separate PHP code from non-PHP code, including HTML.<ref>{{cite web|accessdate=2008-02-25|url=http://www.php.net/manual/en/tutorial.firstpage.php|title=Your first PHP-enabled page |publisher=The PHP Group }}</ref>

The first form of delimiters, <code><?php</code> and <code>?></code>, in [[XHTML]] and other [[XML]] documents, creates correctly formed XML 'processing instructions'.<ref>{{cite web
|url=http://www.w3.org/TR/2008/REC-xml-20081126/#sec-pi
|title=Processing Instructions
|work=Extensible Markup Language (XML) 1.0 (Fifth Edition)
|publisher=W3C
|date=26 November 2008
|last=Bray
|first=Tim
|coauthors=et al
|accessdate=2009-06-18}}</ref> This means that the resulting mixture of PHP code and other markup in the server-side file is itself well-formed XML.

Variables are prefixed with a [[dollar sign|dollar symbol]], and a [[primitive type|type]] does not need to be specified in advance. Unlike function and class names, variable names are case sensitive. Both double-quoted (<code>""</code>) and [[heredoc]] strings provide the ability to interpolate a variable's value into the string.<ref>{{cite web|accessdate=2008-03-16|url=http://www.php.net/manual/en/language.variables.php|title=Variables |publisher=The PHP Group }}</ref> PHP treats [[newline]]s as [[whitespace (computer science)|whitespace]] in the manner of a [[free-form language]] (except when inside string quotes), and statements are terminated by a semicolon.<ref>{{cite web|accessdate=2008-03-16|url=http://www.php.net/basic-syntax.instruction-separation|title=Instruction separation |publisher=The PHP Group }}</ref> PHP has three types of [[Comparison of programming languages (syntax)#Comments|comment syntax]]: <code>/* */</code> marks block and inline comments; <code>//</code> as well as <code>#</code> are used for one-line comments.<ref>{{cite web|accessdate=2008-03-16|url=http://www.php.net/manual/en/language.basic-syntax.comments.php|title=Comments |publisher=The PHP Group }}</ref> The <tt>echo</tt> statement is one of several facilities PHP provides to output text (e.g. to a web browser).

In terms of keywords and language syntax, PHP is similar to most high level languages that follow the C style syntax. <code>''if''</code> conditions, <code>''for''</code> and <code>''while''</code> loops, and function returns are similar in syntax to languages such as C, C++, Java and Perl.

===Data types===
PHP stores whole numbers in a platform-dependent range, either a 64-bit or 32-bit [[Signed number representations|signed]] [[Integer (computer science)|integer]] equivalent to the [[C variable types and declarations|C-language long type]]. Unsigned integers are converted to signed values in certain situations; this behavior is different from other programming languages.<ref>{{cite web | url = http://www.mysqlperformanceblog.com/2007/03/27/integers-in-php-running-with-scissors-and-portability/ | title = Integers in PHP, running with scissors, and portability | date = March 27, 2007 | publisher = MySQL Performance Blog | accessdate = 2007-03-28 }}</ref> Integer variables can be assigned using decimal (positive and negative), [[octal]], and [[hexadecimal]] notations. [[Floating point]] numbers are also stored in a platform-specific range. They can be specified using [[floating point]] notation, or two forms of [[scientific notation]].<ref name="types">{{cite web|accessdate=2008-03-16|url=http://www.php.net/manual/en/language.types.php|title=Types |publisher=The PHP Group }}</ref> PHP has a native [[Boolean datatype|Boolean]] type that is similar to the native Boolean types in [[Java (programming language)|Java]] and [[C++]]. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in [[Perl]] and [[C++]].<ref name="types" /> The null data type represents a variable that has no value. The only value in the null data type is ''NULL''.<ref name="types" /> Variables of the "resource" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources.<ref name="types" /> Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in [[Hash table|hashes]] with both keys and values, and the two can be intermingled.<ref name="types" /> PHP also supports [[string (computing)|strings]], which can be used with single quotes, double quotes, nowdoc or [[heredoc|heredoc syntax]].<ref>{{cite web|accessdate=2008-03-21|url=http://www.php.net/manual/en/language.types.string.php|title=Strings |publisher=The PHP Group }}</ref>

The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.<ref>{{cite web | url = http://www.php.net/spl | title = SPL&nbsp;— StandardPHPLibrary | date = March 16, 2009 | publisher = PHP.net | accessdate = 2009-03-16 }}</ref>

===Functions===
PHP has hundreds of base functions and thousands more via extensions. These functions are well documented on the PHP site; however, the built-in library has a wide variety of naming conventions and inconsistencies.<ref>{{cite web|title=Problems with PHP|url=http://toykeeper.net/soapbox/php_problems/|accessdate=20 December 2010}}</ref> PHP currently has no functions for [[Thread (computer science)|thread]] programming, although it does support multiprocess programming on [[POSIX]] systems.<ref>{{cite web|accessdate=2009-08-06|url=http://nz.php.net/manual/en/book.pcntl.php|title=PHP.NET: Process Control}}</ref><br />
Additional functions can be defined by a developer:
<source lang=php>
function myFunction() { //declares a function, this is named myFunction
    return 'John Doe'; //returns the value 'John Doe'
}

echo 'My name is ' . myFunction() . '!'; //outputs the text and the return variable of the myFunction, the function is also called
//the result of the output will be 'My name is John Doe!'
</source>

====PHP 5.2 and earlier====
Functions are not [[first-class function]]s and can only be referenced by their name, directly or dynamically by a variable containing the name of the function.<ref name="functions">{{cite web|accessdate=2008-03-16|url=http://www.php.net/manual/en/language.functions.php|title=Functions |publisher=The PHP Group }}</ref> User-defined functions can be created at any time without being [[Function prototype|prototyped]].<ref name="functions" /> Functions can be defined inside code blocks, permitting a [[Dynamic dispatch|run-time decision]] as to whether or not a function should be defined. Function calls must use parentheses, with the exception of zero argument class [[Constructor (computer science)|constructor]] functions called with the PHP <code>new</code> operator, where parentheses are optional. PHP supports quasi-[[anonymous function]]s through the <code>create_function()</code> function, although they are not true anonymous functions because anonymous functions are nameless, but functions can only be referenced by name, or indirectly through a variable <code>$function_name();</code>, in PHP.<ref name="functions" />

====PHP 5.3 and newer====
PHP gained support for [[Closure (computer science)|closures]]. True [[anonymous function]]s are supported using the following syntax:
<source lang=php>
function getAdder($x) {
    return function($y) use ($x) {
        return $x + $y;
    };
}

$adder = getAdder(8);
echo $adder(2); // prints "10"
</source>
Here, the <code>getAdder()</code> function creates a closure using the parameter <code>$x</code> (the keyword <code>use</code> imports a variable from the lexical context), which takes an additional argument <code>$y</code> and returns it to the caller. Such a function is a first class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc.
For more details see [http://wiki.php.net/rfc/closures Lambda functions and closures RFC].

The [[goto]] flow control statement is used as follows:
<source lang=php>
function lock() {
    $file = fopen('file.txt', 'r+');
    retry:
    if (!flock($file, LOCK_EX & LOCK_NB)) {
        goto retry;
    }
    fwrite($file, 'Success!');
    fclose($file);
    return 0;
}
</source>
When <code>flock()</code> is called, PHP opens a file and tries to lock it. The target label <code>retry:</code> defines the point to which execution should return if <code>flock()</code> is unsuccessful and <code>goto retry;</code> is called. The <code>goto</code> statement is restricted and requires that the target label be in the same file and context.<br />

The <code>goto</code> statement has been supported since PHP 5.3.

===Objects===
Basic [[object-oriented programming]] functionality was added in PHP 3 and improved in PHP 4.<ref name="about PHP"/> Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.<ref name="php 5 objects" /> In previous versions of PHP, objects were handled like [[value type]]s.<ref name="php 5 objects">{{cite web|accessdate=2008-03-16|url=http://mjtsai.com/blog/2004/07/15/php-5-object-references/|title=PHP 5 Object References |publisher=mjtsai }}</ref> The drawback of this method was that the whole object was copied when a variable was assigned or passed as a parameter to a method. In the new approach, objects are referenced by [[handle (computing)|handle]], and not by value. PHP 5 introduced private and protected [[member variable]]s and methods, along with [[Abstract type|abstract classes]] and [[Final type|final classes]] as well as [[abstract method]]s and [[final method]]s. It also introduced a standard way of declaring [[constructor (computer science)|constructors]] and [[destructor (computer science)|destructors]], similar to that of other object-oriented languages such as [[C++]], and a standard [[exception handling]] model. Furthermore, PHP 5 added [[interface (computer science)|interfaces]] and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. [[Object (computer science)|Objects]] implementing ArrayAccess can be used with [[array data type|array]] syntax and [[object (computer science)|objects]] implementing [[Iterator]] or [[IteratorAggregate]] can be used with the <code>foreach</code> [[language construct]]. There is no [[virtual table]] feature in the engine, so [[static variable]]s are bound with a name instead of a reference at compile time.<ref name="zend engine 2">{{cite web|accessdate=2008-03-16|url=http://www.php.net/zend-engine-2.php|title=Classes and Objects (PHP 5) |publisher=The PHP Group }}</ref>

If the developer creates a copy of an object using the reserved word <code>clone</code>, the Zend engine will check if a <code>__clone()</code> method has been defined or not. If not, it will call a default <code>__clone()</code> which will copy the object's properties. If a <code>__clone()</code> method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so that the programmer can start with a by-value [[wikt:replica|replica]] of the source object and only override properties that need to be changed.<ref>{{cite web|accessdate=2008-03-16|url=http://www.php.net/language.oop5.cloning|title=Object cloning |publisher=The PHP Group }}</ref>

Basic example of [[object-oriented programming]] as described above:
<source lang="php">
class Person {
   public $firstName;
   public $lastName;

   public function __construct($firstName, $lastName = '') { //Optional parameter
       $this->firstName = $firstName;
       $this->lastName = $lastName;
   }

   public function greet() {
       return "Hello, my name is " . $this->firstName . " " . $this->lastName . ".";
   }

   static public function staticGreet($firstName, $lastName) {
       return "Hello, my name is " . $firstName . " " . $lastName . ".";
   }
}

$he = new Person('John', 'Smith');
$she = new Person('Sally', 'Davis');
$other = new Person('Joe');

echo $he->greet(); // prints "Hello, my name is John Smith."
echo '<br />';
echo $she->greet(); // prints "Hello, my name is Sally Davis."
echo '<br />';
echo $other->greet(); // prints "Hello, my name is Joe ."
echo '<br />';
echo Person::staticGreet('Jane', 'Doe'); // prints "Hello, my name is Jane Doe."
</source>

====Visibility of properties and methods====
The visibility of PHP properties and methods refers to [[visibility (computer science)|visibility]] in PHP. It is defined using the [[keyword (computer programming)|keyword]]s <code>public</code>, <code>private</code>, and <code>protected</code>. The default is public, if only [[Variable (programming)|var]] is used; <code>var</code> is a synonym for <code>public</code>. Items declared <code>public</code> can be accessed everywhere. <code>protected</code> limits access to [[inherited class]]es (and to the class that defines the item). <code>private</code> limits visibility only to the class that defines the item.<ref>{{cite web|url=http://theserverpages.com/php/manual/en/language.oop5.visibility.php |title=PHP: Visibility - Manual |publisher=Theserverpages.com |date=2005-05-19 |accessdate=2010-08-26}}</ref> Objects of the same type have access to each other's private and protected members even though they are not the same instance. PHP's member visibility features have sometimes been described as "highly useful."<ref>{{cite web |url=http://www.devshed.com/c/a/PHP/More-on-Private-Methods-with-PHP-5-Member-Visibility/ |title=More on Private Methods with PHP 5 Member Visibility
 |first= Alejandro |last=Gervasio |publisher=devshed.com |accessdate=24 November 2010}}</ref> However, they have also sometimes been described as "at best irrelevant and at worst positively harmful."<ref>{{cite web|url=http://aperiplus.sourceforge.net/visibility.php |title=Visibility in PHP: Public, Private and Protected |publisher=Aperiplus.sourceforge.net |date= |accessdate=2010-08-26}}</ref>

==Speed optimization==
{{Main|PHP accelerator}}

PHP [[source code]] is [[compiler|compiled]] on-the-fly to an internal format that can be executed by the PHP engine.<ref>{{cite web|accessdate=2009-11-04|url=http://www.linux-tutorial.info/modules.php?name=Howto&pagename=Unix-and-Internet-Fundamentals-HOWTO/languages.html|title=How do computer languages work? }}</ref><ref>{{harv|Gilmore|2006|p=43}}</ref> In order to speed up execution time and not have to compile the PHP source code every time the webpage is accessed, PHP scripts can also be deployed in executable format using a [[PHP#Compilers|PHP compiler]].

Code optimizers aim to enhance the performance of the compiled code by reducing its size, merging redundant instructions and making other changes that can reduce the execution time. With PHP, there are often opportunities for [[optimization (computer science)|code optimization]].<ref>{{cite web|accessdate=2008-03-28|title=PHP Accelerator 1.2 (page 3, Code Optimisation)|url=http://www.php-accelerator.co.uk/PHPA_Article.pdf|format=PDF |publisher=Nick Lindridge }}</ref> An example of a code optimizer is the [[eAccelerator]] PHP extension.<ref>{{cite web|accessdate=2009-09-18|url=http://eaccelerator.net/|title=eAccelerator |publisher=eaccelerator.net }}</ref>

Another approach for reducing compilation overhead for PHP servers is using an [[PHP accelerator|opcode cache]]. Opcode caches work by [[Cache|caching]] the compiled form of a PHP script ([[opcode]]s) in [[shared memory]] to avoid the overhead of [[parsing]] and [[compiling]] the code every time the script runs. An opcode cache, [[Alternative PHP Cache|APC]], will be built into an upcoming release of PHP.<ref>{{cite web|accessdate=2009-09-18|url=http://davidwalsh.name/php6|title=Upcoming PHP6 Additions & Changes }}</ref>

Opcode caching and code optimization can be combined for best efficiency, as the modifications do not depend on each other (they happen in distinct stages of the compilation).

==Compilers==

The PHP language was originally implemented as an [[Interpreter (computing)|interpreter]]. Several compilers have been developed which decouple the PHP language from the interpreter. Advantages of compilation include better execution speed, static analysis, and improved interoperability with code written in other languages.<ref>{{cite web|last=Favre |first=Nicolas |url=http://technow.owlient.eu/index.php?post/2010/02/20/php-compilers |title=A review of PHP compilers and their outputs |publisher=Technow.owlient.eu |author=Nicolas Favre-Felix |date=2010-02-16 |accessdate=2010-05-20}}</ref> PHP compilers of note include [[Phalanger (compiler)|Phalanger]], which compiles PHP into [[Common Intermediate Language|CIL]] byte-code, and [[HipHop for PHP|HipHop]], developed at Facebook and now available as open source, which transforms the PHP Script into C++, then compiles it, reducing server load up to 50%.

==Resources==
PHP includes [[List of PHP libraries|free and open source libraries]] with the core build. PHP is a fundamentally [[Internet]]-aware system with modules built in for accessing [[File transfer protocol|FTP]] servers, many database servers, embedded SQL libraries such as embedded [[PostgreSQL]], [[MySQL]] and [[SQLite]], [[Lightweight Directory Access Protocol|LDAP]] servers, and others. Many functions familiar to C programmers such as those in the [[stdio.h|stdio]] family are available in the standard PHP build.<ref>{{cite web|accessdate=2008-02-25|url=http://www.php.net/quickref.php|title=PHP Function List |publisher=The PHP Group }}</ref>

PHP allows developers to write [[extension (computing)|extensions]] in [[C (programming language)|C]] to add functionality to the PHP language. These can then be compiled into PHP or loaded dynamically at runtime. Extensions have been written to add support for the [[Windows API]], process management on [[Unix-like]] [[operating system]]s, multibyte strings ([[Unicode]]), [[cURL]], and several popular [[Archive format|compression formats]]. Some more unusual features include integration with [[Internet Relay Chat]], dynamic generation of images and [[Adobe Flash]] content, and even [[speech synthesis]]. The [[PHP Extension Community Library]] (PECL) project is a repository for extensions to the PHP language.<ref>{{cite web|accessdate=2008-02-25|url=http://www.devnewz.com/090902b.html|title=Developing Custom PHP Extensions |publisher=devnewz|date=2002-09-09 |archiveurl = http://web.archive.org/web/20080218045752/http://www.devnewz.com/090902b.html |archivedate = 2008-02-18}}</ref>

[[Zend Technologies|Zend]] provides a [[Zend Certified Engineer|certification]] exam for programmers to become certified PHP developers.

==See also==
{{Portal|Free software}}
* [[Comparison of programming languages]]
* [[Comparison of web application frameworks#PHP 2|Comparison of PHP Frameworks]]
* [[List of AMP packages]]
* [[List of PHP editors]]
* [[PHP accelerator]]
* [[PHP-FPM]]
* [[PHP-GTK]]
* [[Template processor]]
* [[EasyPHP]]
* [[XAMPP]]
* [[Zend Certified Engineer]]
* [[Zend Server]] Community Edition

==Notes==
{{Reflist|colwidth=30em}}



==External links==
{{Spoken Wikipedia|En-PHP.ogg|2011-01-31}}
{{Wikibooks|Programming:PHP}}
{{Wikiversity}}
* {{official website|http://www.php.net}}
* {{dmoz|Computers/Programming/Languages/PHP|PHP}}
* [http://www.devshed.com/c/b/PHP PHP Section on DevShed]
* [http://www.php.net/manual PHP Reference Manual]

{{PHP}}
{{FOSS}}

{{Good article}}

{{DEFAULTSORT:Php}}
[[Category:Free compilers and interpreters]]
[[Category:Procedural programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:PHP programming language]]
[[Category:Scripting languages]]
[[Category:Initialisms]]
[[Category:Cross-platform software]]
[[Category:Internet terminology]]
[[Category:Filename extensions]]
[[Category:High-level programming languages]]
[[Category:Programming languages created in 1995]]

[[af:PHP]]
[[als:PHP]]
[[ar:بي إتش بي]]
[[an:PHP]]
[[az:PHP]]
[[bn:পিএইচপি]]
[[zh-min-nan:PHP]]
[[be:PHP]]
[[be-x-old:PHP]]
[[bg:PHP]]
[[bar:PHP]]
[[bs:PHP]]
[[br:Lavar PHP]]
[[ca:PHP]]
[[ceb:PHP]]
[[cs:PHP]]
[[cy:PHP]]
[[da:PHP]]
[[de:PHP]]
[[et:PHP]]
[[el:PHP]]
[[es:PHP]]
[[eo:PHP]]
[[eu:PHP]]
[[fa:پی‌اچ‌پی (زبان برنامه‌نویسی)]]
[[fr:PHP]]
[[gl:PHP]]
[[ko:PHP]]
[[hy:PHP]]
[[hi:पीएचपी]]
[[hr:PHP]]
[[id:PHP]]
[[is:PHP]]
[[it:PHP]]
[[he:PHP]]
[[ka:PHP]]
[[kk:PHP]]
[[ku:PHP]]
[[la:PHP]]
[[lv:PHP]]
[[lb:PHP]]
[[lt:PHP]]
[[hu:PHP]]
[[mk:PHP]]
[[mg:PHP]]
[[ml:പി.എച്ച്.പി.]]
[[ms:PHP]]
[[mn:PHP]]
[[my:PHP]]
[[nl:PHP]]
[[ne:पि एच पि]]
[[ja:PHP: Hypertext Preprocessor]]
[[no:PHP]]
[[nn:PHP]]
[[uz:PHP]]
[[km:PHP]]
[[nds:PHP]]
[[pl:PHP]]
[[pt:PHP]]
[[ro:PHP]]
[[ru:PHP]]
[[sah:PHP]]
[[sq:PHP]]
[[si:PHP]]
[[simple:PHP]]
[[sk:PHP (programovací jazyk)]]
[[sl:PHP]]
[[ckb:پی ئێچ پی]]
[[sr:PHP]]
[[sh:PHP]]
[[fi:PHP]]
[[sv:PHP]]
[[tl:PHP]]
[[ta:பி.எச்.பி]]
[[kab:PHP]]
[[te:PHP]]
[[th:ภาษาพีเอชพี]]
[[tg:PHP]]
[[tr:PHP]]
[[tk:PHP]]
[[uk:PHP]]
[[ur:PHP]]
[[vi:PHP]]
[[vls:PHP]]
[[wuu:PHP]]
[[yi:PHP]]
[[zh-yue:PHP]]
[[bat-smg:PHP]]
[[zh:PHP]]