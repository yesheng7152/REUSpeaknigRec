{{distinguish|Java (programming language)|Java (software platform)}}
{{distinguish|Javanese script}}
{{Selfref|For the use of JavaScript on Wikipedia, see [[Wikipedia:JavaScript]].}}
{{Infobox programming language
| name                   = JavaScript
| paradigm               = [[Multi-paradigm]]: [[scripting language|scripting]], [[object-oriented programming|object-oriented]] ([[prototype-based programming|prototype-based]]), [[imperative programming|imperative]], [[functional programming|functional]]<ref name="jsfunc"/>
| year = {{start date and age|1995}}
| logo = 
| caption = 
| designer = [[Brendan Eich]]
| developer= [[Netscape Communications Corporation]], [[Mozilla Foundation]]
| latest_release_version = 1.8.5<ref>{{cite web|url=https://developer.mozilla.org/en/JavaScript/New_in_JavaScript/1.8.5 |title=New in JavaScript 1.8.5 &#124; Mozilla Developer Network |publisher=Developer.mozilla.org |date=2012-11-18 |accessdate=2013-05-26}}</ref>
| latest_release_date    = {{start date and age|2011|3|22}}
| latest_preview_version = 
| latest_preview_date    = {{start date and age|2010|7|27}}
| typing                 = [[dynamic typing|dynamic]], [[duck typing|duck]]
| implementations        = [[KJS (KDE)|KJS]], [[Rhino (JavaScript engine)|Rhino]], [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], [[V8 (JavaScript engine)|V8]], [[WebKit]], [[Linear b (script engine)|Carakan]], [[Chakra (JScript engine)|Chakra]]
| influenced_by          = [[C (programming language)|C]], [[Java (programming language)|Java]], [[Perl]], [[Python (programming language)|Python]], [[Scheme (programming language)|Scheme]], [[Self (programming language)|Self]]
| influenced = [[ActionScript]], [[CoffeeScript]], [[Dart (programming language)|Dart]], [[JScript .NET]], [[Objective-J]], [[QML]], TIScript, [[TypeScript]]
| license                = 
| website                = 
| wikibooks              = JavaScript
}}
{{Infobox file format
| name                   = JavaScript
| icon                   =  [[File:Javascript icon.svg|150px]]
| logo                   = 
| screenshot             = 
| caption                = 
| extension              = .js
| mime                   = application/javascript</code><br /><code>text/javascript</code>&nbsp;(obsolete)<ref>{{cite web|url=http://www.apps.ietf.org/rfc/rfc4329.html#sec-7.1 |title=RFC 4329 |publisher=Apps.ietf.org |date= |accessdate=2013-05-26}}</ref>
| type code              = 
| uniform type           = com.netscape.javascript-source<ref>{{cite web
| publisher     = Apple Inc.
| url           = http://developer.apple.com/mac/library/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html
| title         = System-Declared Uniform Type Identifiers
| work          = Mac OS X Reference Library
| accessdate    = 2010-03-05
}}</ref>
| magic                  = 
| owner                  = 
| released               = 
| latest release version = 
| latest release date    = 
| genre                  = [[Scripting language]]
| container for          = 
| contained by           = 
| extended from          = 
| extended to            = 
| standard               = 
| url                    = 
}}
{{JavaScriptSidebar}}

'''JavaScript''' ('''JS''') is an [[Interpreter (computing)|interpreted]] computer [[programming language]].{{Sfn|Flanagan|Ferguson|2006|p=1}} It was originally implemented as part of [[web browser]]s so that [[Client-side scripting|client-side scripts]] could [[User interface|interact with the user]], control the browser, communicate [[Ajax (programming)|asynchronously]], and alter the [[Document Object Model|document content]] that was displayed.{{Sfn|Flanagan|Ferguson|2006|p=1}} More recently, however, it has become common in server-side programming, game development and the creation of desktop applications.

JavaScript is a [[prototype-based]] [[scripting language]] with [[dynamic language|dynamic]] typing and has [[first-class functions]]. Its [[JavaScript syntax|syntax]] was influenced by [[C (programming language)|C]]. JavaScript copies many names and naming conventions from [[Java (programming language)|Java]], but the two languages are otherwise unrelated and have very different semantics. The key design principles within JavaScript are taken from the [[Self (programming language)|Self]] and [[Scheme (programming language)|Scheme]] programming languages.<ref>{{cite web|title=ECMAScript Language Overview|url=http://www.ecmascript.org/es4/spec/overview.pdf|format=PDF|page=4|date=2007-10-23|accessdate=2009-05-03}}</ref>  It is a [[multi-paradigm]] language, supporting [[Object-oriented programming|object-oriented]],<ref name="ECMA-262">{{cite web|url=http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf | title= ECMAScript Language Specification }}</ref> [[imperative programming|imperative]], and [[functional programming|functional]]<ref name="jsfunc">{{cite video |people= [[Douglas Crockford]] |date= |title= Douglas Crockford on Functional JavaScript |url= http://www.blinkx.com/video/douglas-crockford-on-functional-javascript/xscZz8XhfuNQ_aaVuyUB2A |format= flv |medium= Tech talk |publisher=[[blinkx]] |time= 2:49 |quote=[JavaScript] is also coincidentally the world's most popular functional programming language. JavaScript is and has always been, at least since [version] 1.2, a functional programming language.}}{{dead link|date=March 2013}}</ref><ref>[http://www.crockford.com/javascript/little.html The Little JavaScripter] shows the relationship with Scheme in more detail.</ref> programming styles.

JavaScript's use in [[Application software|applications]] outside of web pages—for example, in [[Portable Document Format|PDF]] documents, [[site-specific browser]]s, and [[desktop widget]]s—is also significant. Newer and faster JavaScript [[Virtual machine|VMs]] and frameworks built upon them (notably [[Node.js]]) have also increased the popularity of JavaScript for server-side [[web application]]s.

JavaScript was formalized in the [[ECMAScript]] language standard and is primarily used as part of a web browser ([[client-side JavaScript]]). This enables [[Computer programming|programmatic]] access to computational objects within a host environment.

==History==

===Birth at Netscape===
JavaScript was originally developed by [[Brendan Eich]]. Battling with Microsoft over the Internet, Netscape considered their client-server solution as a distributed OS, running a portable version of [[Sun Microsystems]]' Java. Because Java was a competitor of C++ and aimed at professional programmers, Netscape also wanted a lightweight [[interpreted language]] that would complement Java by appealing to nonprofessional programmers, like Microsoft's Visual Basic  (see [[#JavaScript and Java|JavaScript and Java]]).<ref>{{cite journal |last=Severance |first=Charles |year=2012 |month=February |title=Java Script: Designing a Language in 10 Days |journal=Computer |volume=45 |issue=2 |pages=7–8 |publisher=IEEE Computer Society |url=http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html |accessdate=23 March 2013 |doi=10.1109/MC.2012.57 }}</ref>

Developed under the name ''Mocha'', ''LiveScript'' was the official name for the language when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript<ref>[http://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html Press release announcing JavaScript], "Netscape and Sun announce Javascript", PR Newswire, December 4, 1995</ref> when it was deployed in the Netscape browser version 2.0B3.<ref name="techvision">{{cite web |archiveurl=http://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html |archivedate=2008-02-08 |title=TechVision: Innovators of the Net: Brendan Eich and JavaScript |publisher=Web.archive.org |date= |url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html }}</ref>

The change of name from LiveScript to JavaScript roughly coincided with Netscape adding support for Java technology in its [[Netscape Navigator]] web browser. The final choice of name caused confusion, giving the impression that the language was a spin-off of the [[Java programming language]], and the choice has been characterized by many as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new web programming language.<ref>{{cite web|url=http://www.webdevelopersnotes.com/basics/languages_on_the_internet.php3 |title=Programming languages used on the Internet and the World Wide Web (WWW) |publisher=Webdevelopersnotes.com |date= |accessdate=2009-05-19}}</ref><ref>{{cite web|url=http://safari.oreilly.com/0596101996/jscript5-CHP-1 |title=O'Reilly - Safari Books Online - 0596101996 - JavaScript: The Definitive Guide, 5th Edition |publisher=Safari.oreilly.com |date= |accessdate=2009-05-19}}</ref>

===Server-side JavaScript===
Netscape introduced an implementation of the language for [[server-side scripting]] (SSJS) with [[Netscape Enterprise Server]], first released in December, 1994 (soon after releasing JavaScript for browsers).<ref name = "Newscape JavaScript Guide-1998">{{cite web|title=Server-Side JavaScript Guide|publisher=Netscape Communications Corporation|year=1998|chapter=Chapter 2: Getting Started|url=http://docs.oracle.com/cd/E19957-01/816-6411-10/getstart.htm|accessdate=2012-04-25}}</ref><ref name = "Morgan-Netcape LiveWire">{{cite web|title=Using Netscape™ LiveWire™, Special Edition | author=Mike Morgan | chapter=Chapter 6: Netscape Internet Application Framework| url = http://vampire.rulez.org/onlinedoc/book/NetscapeLiveWire/ch6.htm | year = 1996 | publisher = Que }}</ref>
Since the mid-2000s, there has been a proliferation of [[Comparison of server-side JavaScript solutions|server-side JavaScript implementations]]. [[Node.js]] is one recent notable example of server-side JavaScript being used in real-world applications.<ref name="RWW-Server-Side-2009-12-17">{{cite web |title = Server-Side Javascript: Back With a Vengeance |work = Read Write Web |date = December 17, 2009 |accessdate = May 28, 2012 |url = http://www.readwriteweb.com/archives/server-side_javascript_back_with_a_vengeance.php }}</ref><ref name="node.js-about">{{cite web |url=http://nodejs.org/about/ |title  = Node's goal is to provide an easy way to build scalable network programs | work = About Node.js | publisher = Joyent}}</ref>

===Adoption by Microsoft===
JavaScript very quickly gained widespread success as a client-side scripting language for web pages.
[[Microsoft]] introduced JavaScript support in its own web browser, [[Internet Explorer]], in version 3.0, released in August 1996.<ref name="popularity">{{cite web|url=http://brendaneich.com/2008/04/popularity/ |title=Popularity |author=Brendan Eich |date=3 April 2008 |accessdate=2012-01-19}}</ref>{{Failed verification|date=April 2012}}
Microsoft's webserver, [[Internet Information Server]], introduced support for server-side scripting in JavaScript with release 3.0 (1996).
Microsoft started to promote webpage scripting using the umbrella term [[Dynamic HTML]].

Microsoft's JavaScript implementation was later renamed [[JScript]] to avoid trademark issues.
JScript added new date methods to fix the [[Year 2000 problem|Y2K]]-problematic methods in JavaScript, which were based on Java's <code>[[java.util|java.util.Date]]</code> class.

===Standardization===

In November 1996, Netscape announced that it had submitted JavaScript to [[Ecma International]] for consideration as an industry standard, and subsequent work resulted in the standardized version named [[ECMAScript]]. In June 1997, [[Ecma International]] published the first edition of the [[ECMA-262]] [[specification]]. A year later, in June 1998, some modifications were made to adapt it to the ISO/IEC-16262 standard, and the second edition was released. The third edition of [[ECMA-262]] (published on December 1999) is the version most browsers currently use.<ref>{{cite web|url=http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf |title=ECMAScript 3rd Edition specification |format=PDF |date= |accessdate=2013-05-26}}</ref>

Fourth edition of Ecmascript standard was not released and does not exist. Fifth edition of the Ecmascript standard was released in December 2009. The current edition of Ecmascript standard is 5.1 and it was released in June 2011.<ref>{{cite web|url=http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf |title=Standard ECMA-262 |format=PDF |date= |accessdate=2013-05-26}}</ref>

===Later developments===
JavaScript has become one of the most popular programming languages on the web. Initially, however, many professional programmers denigrated the language because its target audience consisted of web authors and other such "amateurs", among other reasons.<ref>{{cite web|url=http://www.crockford.com/javascript/javascript.html |title=JavaScript: The World's Most Misunderstood Programming Language |publisher=Crockford.com |date= |accessdate=2009-05-19}}</ref> The advent of [[Ajax (programming)|Ajax]] returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive [[List of JavaScript libraries|frameworks and libraries]], improved JavaScript programming practices, and increased usage of JavaScript outside of web browsers, as seen by the proliferation of [[server-side JavaScript]] platforms.

In January 2009, the [[CommonJS]] project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.<ref>{{cite web |url=http://arstechnica.com/web/news/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination.ars |title=CommonJS effort sets JavaScript on path for world domination |author=Kris Kowal |date=1 December 2009 |work=[[Ars Technica]] |publisher=[[Condé Nast Publications]] |accessdate=18 April 2010}}</ref>

==Trademark==
Today, "JavaScript" is a [[trademark]] of [[Oracle Corporation]].<ref>{{cite web|title=USPTO Copyright entry #75026640|url=http://tarr.uspto.gov/servlet/tarr?regser=serial&entry=75026640|publisher=USPTO}}</ref> It is used under license for technology invented and implemented by Netscape Communications and current entities such as the [[Mozilla Foundation]].<ref>{{cite web|title=Sun Trademarks|url=http://www.sun.com/suntrademarks/|publisher=Sun Microsystems|accessdate=2007-11-08}}</ref>

==Features==
The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.

===Imperative and structured===
JavaScript supports much of the [[structured programming]] syntax from [[C (computer language)|C]] (e.g., <code>if</code> statements, <code>while</code> loops, <code>switch</code> statements, etc.). One partial exception is [[scope (computer science)|scoping]]: C-style [[block scoping]] is not supported. Instead, JavaScript has [[function scoping]] (although, block scoping using the <code>let</code> keyword was added in JavaScript 1.7). Like C, JavaScript makes a distinction between [[Expression (programming)|expressions]] and [[Statement (programming)|statements]]. One syntactic difference from C is [[Defensive semicolon|automatic semicolon insertion]], in which the semicolons that terminate statements can be omitted.{{Sfn|Flanagan|Ferguson|2006|p=16}}

===Dynamic===
; Dynamic typing: As in most [[scripting language]]s, [[type system|types]] are associated with [[value (computer science)|values]], not with [[Variable (programming)|variables]]. For example, a variable <code>x</code> could be bound to a number, then later rebound to a [[string (computer science)|string]]. JavaScript supports various ways to test the type of an object, including [[duck typing]].{{Sfn|Flanagan|Ferguson|2006|pp=176–178}}
; Object based: JavaScript is almost entirely [[object-based]]. JavaScript [[Object (computer science)|objects]] are [[associative array]]s, augmented with prototypes (see below). Object property names are string keys.  They support two equivalent syntaxes: dot notation (<code>obj.x&nbsp;=&nbsp;10</code>) and bracket notation (<code>obj['x']&nbsp;=&nbsp;10</code>). Properties and their values can be added, changed, or deleted at run-time. Most properties of an object (and those on its prototype inheritance chain) can be enumerated using a <code>for...in</code> loop. JavaScript has a small number of built-in objects such as <code>Function</code> and <code>Date</code>.
; Run-time evaluation: JavaScript includes an <code>[[eval]]</code> function that can execute statements provided as strings at run-time.

===Functional===
; First-class functions: [[Subroutine|Functions]] are [[first-class function|first-class]]; they are objects themselves. As such, they have properties and methods, such as <code>.call()</code> and <code>.bind()</code>.<ref>{{cite web|url=http://es5.github.com/#x15.3.4-toc |title=Properties of the Function Object |publisher=Es5.github.com |date= |accessdate=2013-05-26}}</ref> A ''nested'' function is a function defined within another function. It is created each time the outer function is invoked. In addition, each created function forms a [[Closure (computer science)|lexical closure]]: the [[Scope (programming)#Lexical scoping and dynamic scoping|lexical scope]] of the outer function, including any constants, local variables and argument values, becomes part of the internal state of each inner function object, even after execution of the outer function concludes.{{Sfn|Flanagan|Ferguson|2006|p=141}}

===Prototype-based===

; Prototypes: JavaScript uses [[prototype-based programming|prototypes]] where many other object oriented languages use [[Class (computer science)|classes]] for [[Inheritance (computer science)|inheritance]].<ref>{{cite web|title=Inheritance and the prototype chain|url=https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref>  It is possible to simulate many class-based features with prototypes in JavaScript.<ref>{{cite book|last=Herman|first=David|title=Effective Javascript|year=2013|publisher=Addison-Wesley|isbn=9780321812186|page=83}}</ref>
; Functions as object constructors: Functions double as object constructors along with their typical role. Prefixing a function call with <code>new</code> will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the <code>Object</code> prototype).<ref>{{cite book|last=Haverbeke|first=Marjin|title=Eloquent Javascript|year=2011|publisher=No Starch Press|isbn=9781593272821|pages=95–97}}</ref> ECMAScript 5 offers the <code>Object.create</code> method, allowing explicit creation of an instance without automatically inheriting from the <code>Object</code> prototype (older environments can assign the prototype to <code>null</code>).<ref>{{cite web|last=Katz|first=Yehuda|title=Understanding "Prototypes" in JavaScript|url=http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/|accessdate=6 April 2013}}</ref>  The constructor's <code>prototype</code> property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the object used as a constructor. JavaScript's built-in constructors, such as <code>Array</code> or <code>Object</code>, also have prototypes that can be modified. While it is possible to modify the <code>Object</code> prototype, it is generally considered bad practice because most objects in Javascript will inherit methods and properties from the <code>Object</code> prototype and they may not expect the prototype to be modified.<ref>{{cite book|last=Herman|first=David|title=Effective Javascript|year=2013|publisher=Addison-Wesley|isbn=9780321812186|pages=125–127}}</ref>
; Functions as methods<!--not sure where to classify this under-->: Unlike many object-oriented languages, there is no distinction between a function definition and a [[method (computer science)|method]] definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local <code>this</code> keyword is bound to that object for that invocation.

===Miscellaneous===
; Run-time environment: JavaScript typically relies on a run-time environment (e.g. a [[web browser]]) to provide objects and methods by which scripts can interact with the environment (e.g. a webpage DOM). It also relies on the run-time environment to provide the ability to include/import scripts (e.g. [[HTML]] <code><nowiki><script></nowiki></code> elements). This is not a language feature per se, but it is common in most JavaScript implementations.
; Variadic functions<!--note: this is not a functional programming feature-->: An indefinite number of parameters can be passed to a function. The function can access them through [[formal parameter]]s and also through the local <code>arguments</code> object. [[Variadic functions]] can also be created by using the <code>apply</code> method.
; Array and object literals: Like many scripting languages, arrays and objects ([[associative arrays]] in other languages) can each be created with a succinct shortcut syntax. In fact, these [[Object literal|literals]] form the basis of the [[JSON]] data format.
; Regular expressions: JavaScript also supports [[regular expression]]s in a manner similar to [[Perl]], which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.<ref>{{cite book |last=Haverbeke |first=Marijn |title=Eloquent JavaScript |year=2011 |publisher=No Starch Press|isbn=978-1593272821|pages=139–149}}</ref>

===Vendor-specific extensions===
JavaScript is officially managed by [[Mozilla Foundation]], and new language features are added periodically. However, only some [[JavaScript engine]]s support these new features:
* property getter and setter functions (supported by WebKit, Opera,<ref>Robert Nyman, [http://robertnyman.com/2009/05/28/getters-and-setters-with-javascript-code-samples-and-demos/ Getters And Setters With JavaScript – Code Samples And Demos], published 29 May 2009, accessed 2 January 2010.</ref> ActionScript, and Rhino)<ref>John Resig, [http://ejohn.org/blog/javascript-getters-and-setters/ JavaScript Getters and Setters], 18 July 2007, accessed 2 January 2010</ref>
* conditional <code>catch</code> clauses
* iterator protocol (adopted from [[Python (programming language)|Python]])
* shallow [[generator (computer programming)|generators]]-[[coroutine]]s (adopted from Python)
* [[List comprehension|array comprehensions]] and generator expressions (adopted from Python)
* proper block scope via the <code>let</code> keyword
* array and object destructuring (limited form of [[pattern matching]])
* concise function expressions (<code>function(args) expr</code>)
* [[ECMAScript for XML]] (E4X), an extension that adds native XML support to ECMAScript

==Syntax and semantics==
{{Main|JavaScript syntax}}

{{As of|2011}}, the latest version of the language is JavaScript 1.8.5. It is a superset of ECMAScript (ECMA-262) Edition 3. Extensions to the language, including partial [[ECMAScript for XML]] (E4X) (ECMA-357) support and experimental features considered for inclusion into future ECMAScript editions, are documented here.<ref>{{cite web|url=https://developer.mozilla.org/en/JavaScript/Reference/About#JavaScript_history |title=MDN - About this Reference |publisher=Developer.mozilla.org |date=2008-08-31 |accessdate=2009-05-19}}</ref>

===Simple examples===
[[Variable (computer science)|Variables]] in JavaScript can be defined using the <code>var</code> keyword:<ref>{{cite web |url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/var |title=var - JavaScript - MDN |publisher=The [[Mozilla Developer Network]] |accessdate=22 December 2012}}</ref>
<syntaxhighlight lang="javascript">
var x; //defines the variable x, although no value is assigned to it by default
var y = 2; //defines the variable y and assigns the value of 2 to it
</syntaxhighlight>
Note the [[Comment (computer programming)|comments]] in the example above, both of which were preceded with two [[Slash (punctuation)|forward slashes]].

There is no built-in [[Input/output|I/O]] functionality in JavaScript; the runtime environment provides that. The ECMAScript specification in edition 5.1 mentions:<ref>{{cite web |url=http://www.ecma-international.org/ecma-262/5.1/#sec-4 |title=ECMAScript Language Specification - ECMA-262 Edition 5.1|publisher=[[Ecma International]] |accessdate=22 December 2012}}</ref>
<blockquote>... indeed, there are no provisions in this specification for input of external data or output of computed results.</blockquote>
However, most runtime environments have a <code>console</code> object<ref>{{cite web|title=console|url=https://developer.mozilla.org/en-US/docs/DOM/console|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref> that can be used to print output. Here is a minimalist [[Hello World program]]:
<syntaxhighlight lang="javascript">
console.log("Hello world!");
</syntaxhighlight>

A simple [[Recursion (computer science)|recursive]] function:
<syntaxhighlight lang="javascript">
function factorial(n) {
    if (n === 0) {
        return 1;
    }
    return n * factorial(n - 1);
}
</syntaxhighlight>

[[Anonymous function]] (or lambda) syntax and [[Closure (Computer Science)|closure]] example:
<syntaxhighlight lang="javascript">
var displayClosure = function() {
    var count = 0;
    return function () {
        return ++count;
    };
}
var inc = displayClosure();
inc(); // returns 1
inc(); // returns 2
inc(); // returns 3
</syntaxhighlight>

[[Variadic function]] demonstration (<tt>arguments</tt> is a special [[variable (programming)|variable]]).<ref>{{cite web|title=arguments|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref>
<syntaxhighlight lang="javascript">
var sum = function() {
    var i, x = 0;
    for (i = 0; i < arguments.length; ++i) {
        x += arguments[i];
    }
    return x;
}
sum(1, 2, 3); // returns 6
</syntaxhighlight>

[[Immediately-invoked function expression]]s allow functions to pass around variables under their own closures.

<syntaxhighlight lang="JavaScript">
var v;
v = 1;
var getValue = (function(v) {
  return function() {return v;};
})(v);

v = 2;

getValue(); // 1
</syntaxhighlight>

===More advanced example===
This sample code displays various JavaScript features.

<!-- Don't try to standardize any styling in this example—its purpose is to showcase language syntax, not provide some standard role model. -->
<div style="overflow:auto;">
<syntaxhighlight lang="javascript">
/* Finds the lowest common multiple (LCM) of two numbers */
function LCMCalculator(x, y) { // constructor function
    var checkInt = function (x) { // inner function
        if (x % 1 !== 0) {
            throw new TypeError(x + " is not an integer"); // throw an exception
        }
        return x;
    };
    this.a = checkInt(x)
    //   semicolons   ^^^^  are optional, a newline is enough
    this.b = checkInt(y);
}
// The prototype of object instances created by a constructor is
// that constructor's "prototype" property.
LCMCalculator.prototype = { // object literal
    constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately
    gcd: function () { // method that calculates the greatest common divisor
        // Euclidean algorithm:
        var a = Math.abs(this.a), b = Math.abs(this.b), t;
        if (a < b) {
            // swap variables
            t = b;
            b = a;
            a = t;
        }
        while (b !== 0) {
            t = b;
            b = a % b;
            a = t;
        }
        // Only need to calculate GCD once, so "redefine" this method.
        // (Actually not redefinition—it's defined on the instance itself,
        // so that this.gcd refers to this "redefinition" instead of LCMCalculator.prototype.gcd.)
        // Also, 'gcd' === "gcd", this['gcd'] === this.gcd
        this['gcd'] = function () {
            return a;
        };
        return a;
    },
    // Object property names can be specified by strings delimited by double (") or single (') quotes.
    "lcm" : function () {
        // Variable names don't collide with object properties, e.g. |lcm| is not |this.lcm|.
        // not using |this.a * this.b| to avoid FP precision issues
        var lcm = this.a / this.gcd() * this.b;
        // Only need to calculate lcm once, so "redefine" this method.
        this.lcm = function () {
            return lcm;
        };
        return lcm;
    },
    toString: function () {
        return "LCMCalculator: a = " + this.a + ", b = " + this.b;
    }
};

// Define generic output function; this implementation only works for web browsers
function output(x) {
    document.body.appendChild(document.createTextNode(x));
    document.body.appendChild(document.createElement('br'));
}

// Note: Array's map() and forEach() are defined in JavaScript 1.6.
// They are used here to demonstrate JavaScript's inherent functional nature.
[[25, 55], [21, 56], [22, 58], [28, 56]].map(function (pair) { // array literal + mapping function
    return new LCMCalculator(pair[0], pair[1]);
}).sort(function (a, b) { // sort with this comparative function
    return a.lcm() - b.lcm();
}).forEach(function (obj) {
    output(obj + ", gcd = " + obj.gcd() + ", lcm = " + obj.lcm());
});
</syntaxhighlight>
</div>

The following output should be displayed in the browser window.
<div style="overflow:auto;">
<syntaxhighlight lang="html4strict">
LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638
</syntaxhighlight>
</div>

==Use in web pages==
{{See also|JavaScript engine|Ajax (programming)}}

The most common use of JavaScript is to write functions that are embedded in or included from [[HTML]] pages and that interact with the [[Document Object Model]] (DOM) of the page. Some simple examples of this usage are:

* Loading new page content or submitting data to the server via [[AJAX]] without reloading the page (for example, a social network might allow the user to post status updates without leaving the page)
* Animation of page elements, fading them in and out, resizing them, moving them, etc.
* Interactive content, for example games, and playing audio and video
* [[Data validation|Validating]] input values of a [[form (web)|web form]] to make sure that they are acceptable before being submitted to the server.
* Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for [[web analytics]], [[ad tracking]], [[personalization]] or other purposes.<ref>{{cite web | url=http://piwik.org/docs/javascript-tracking/ | title=JavaScript tracking - Piwik | publisher=[[Piwik]] | accessdate=31 March 2012<!-- 17:56 (UTC)-->}}</ref>

Because JavaScript code can run locally in a user's browser (rather than on a remote server), the browser can respond to user actions quickly, making an application more responsive. Furthermore, JavaScript code can detect user actions which HTML alone cannot, such as individual keystrokes.  Applications such as [[Gmail]] take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of [[Ajax (programming)|Ajax]] programming similarly exploits this strength.

A [[JavaScript engine]] (also known as ''JavaScript interpreter'' or ''JavaScript implementation'') is an [[interpreter (computing)|interpreter]] that interprets JavaScript [[source code]] and executes the [[computer program|script]] accordingly. The first JavaScript engine was created by [[Brendan Eich]] at [[Netscape Communications Corporation]], for the [[Netscape Navigator]] [[web browser]]. The engine, code-named [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], is implemented in [[C (programming language)|C]]. It has since been updated (in JavaScript 1.5) to conform to ECMA-262 Edition 3. The [[Rhino (JavaScript engine)|Rhino]] engine, created primarily by Norris Boyd (formerly of Netscape; now at Google) is a JavaScript implementation in [[Java (programming language)|Java]]. Rhino, like SpiderMonkey, is ECMA-262 Edition 3 compliant.

A web browser is by far the most common host environment for JavaScript. Web browsers typically create "host objects" to represent the [[Document Object Model]] (DOM) in JavaScript. The [[web server]] is another common host environment. A [[Server-side JavaScript|JavaScript webserver]] would typically expose host objects representing [[HTTP]] request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate web pages.

Because JavaScript is the only language that the most popular browsers share support for, it has become a [[target language (computing)|target language]] for many frameworks in other languages, even though JavaScript was never intended to be such a language.<ref name="computerworld">{{cite web|last=Hamilton|first=Naomi|url=http://www.computerworld.com.au/article/255293/-z_programming_languages_javascript|title=The A-Z of Programming Languages: JavaScript|publisher=computerworld.com.au|date=2008-06-31}}</ref> Despite the performance limitations inherent to its dynamic nature, the increasing speed of JavaScript engines has made the language a surprisingly feasible compilation target.

===Example script===

Below is a minimal example of a standards-conforming web page containing JavaScript (using [[HTML|HTML 5]] syntax) and the [[Document object model|DOM]]:
<syntaxhighlight lang="html5">
<!DOCTYPE html>

<meta charset="utf-8">
<title>Minimal Example</title>

<h1 id="header">This is JavaScript</h1>

<script>
    document.body.appendChild(document.createTextNode('Hello World!'));

    var h1 = document.getElementById('header'); // holds a reference to the <h1> tag
    h1 = document.getElementsByTagName('h1')[0]; // accessing the same <h1> element
</script>

<noscript>Your browser either does not support JavaScript, or has it turned off.</noscript>
</syntaxhighlight>

===Compatibility considerations===
{{Main|Web interoperability}}

Because JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.

The DOM interfaces for manipulating web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, the DOM interfaces are defined by a separate standardization effort by the [[World Wide Web Consortium|W3C]]; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript.

To deal with these differences, JavaScript authors can attempt to write standards-compliant code which will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.<ref>Peter-Paul Koch, [http://www.quirksmode.org/js/support.html Object detection]</ref> In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.<ref>Peter-Paul Koch, [http://www.evolt.org/node/23335 Mission Impossible - mouse position]</ref><ref>Peter-Paul Koch, [http://www.quirksmode.org/js/detect.html Browser detect]</ref> Programmers may also use libraries or toolkits which take browser differences into account.

Furthermore, scripts may not work for some users. For example, a user may:

* use an old or rare browser with incomplete or unusual DOM support,
* use a [[Personal digital assistant|PDA]] or [[mobile phone]] browser which cannot execute JavaScript,
* have JavaScript execution disabled as a security precaution,
* use a speech browser due to, for example, a visual disability.

To support these users, web authors can try to create pages which [[Fault-tolerant system|degrade gracefully]] on user agents (browsers) which do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. An alternative approach that many find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled. This is known as [[progressive enhancement]].

===Accessibility===
{{Main|Web accessibility}}
Assuming that the user has not disabled its execution, client-side web JavaScript should be written to enhance the experiences of visitors with visual or physical [[Disability|disabilities]], and certainly should avoid denying information to these visitors.{{Sfn|Flanagan|Ferguson|2006|pp=262–263}}

[[Screen reader]]s, used by the [[Visual impairment|blind and partially sighted]], can be JavaScript-aware and so may access and read the page DOM after the script has altered it. The HTML should be as concise, navigable and [[Semantic HTML|semantically rich]] as possible whether the scripts have run or not. JavaScript should not be totally reliant on [[Mouse (computing)|mouse]] or [[Keyboard (computing)|keyboard]] specific events because a user may be physically unable to use these input devices.  For this reason, device-agnostic events such as <code>onfocus</code> and <code>onchange</code> are preferable to device-centric events such as <code>onmouseover</code> and <code>onkeypress</code> in most cases.{{Sfn|Flanagan|Ferguson|2006|pp=262–263}}

JavaScript should not be used in a way that is confusing or disorienting to any web user. For example, using script to alter or disable the normal functionality of the browser, such as by changing the way the "back" or "refresh" buttons work, is usually best avoided. Equally, triggering events that the user may not be aware of reduces the user's sense of control as do unexpected scripted changes to the page content.<ref>{{cite web|title=Creating Accessible JavaScript|url=http://www.webaim.org/techniques/javascript/|publisher=WebAIM|accessdate=8 June 2010}}</ref>

Often the process of making a complex web page as accessible as possible becomes a [[nontrivial]] problem where issues become matters of debate and opinion, and where compromises are necessary in the end. However, user agents and [[Assistive technology|assistive technologies]] are constantly evolving and new guidelines and relevant information are continually being published on the web.{{Sfn|Flanagan|Ferguson|2006|pp=262–263}}

==Security==
{{see also|Browser security}}
JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the web.  Browser authors contain this risk using two restrictions.  First, scripts run in a [[Sandbox (computer security)|sandbox]] in which they can only perform web-related actions, not general-purpose programming tasks like creating files.  Second, scripts are constrained by the [[same origin policy]]: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site.  Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.

There are subsets of general JavaScript — ADsafe, Secure ECMA Script (SES) — that provide greater level of security, especially on code created by third parties (such as advertisements).<ref>{{cite web|url=http://www.adsafe.org/ |title=Making JavaScript Safe for Advertising |publisher=ADsafe |date= |accessdate=2013-05-26}}</ref><ref>{{cite web|url=http://code.google.com/p/es-lab/wiki/SecureEcmaScript |title=Secure ECMA Script (SES) |publisher=Code.google.com |date= |accessdate=2013-05-26}}</ref>

[[Content Security Policy]] is the main intended method of ensuring that only trusted code is executed on a web page.

{{see also|Content Security Policy}}

===Cross-site vulnerabilities===
{{Main|Cross-site scripting|Cross-site request forgery}}
A common JavaScript-related security problem is [[cross-site scripting]], or XSS, a violation of the [[same origin policy|same-origin policy]]. XSS vulnerabilities occur when an attacker is able to cause a target web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization.  A solution to XSS vulnerabilities is to use ''HTML escaping'' whenever displaying untrusted data.

Some browsers include partial protection against ''reflected'' XSS attacks, in which the attacker provides a URL including malicious script.  However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database.  Only correct design of Web applications on the server side can fully prevent XSS.

XSS vulnerabilities can also occur because of implementation mistakes by browser authors.<ref>MozillaZine, [http://www.mozillazine.org/talkback.html?article=4392 Mozilla Cross-Site Scripting Vulnerability Reported and Fixed]</ref>

Another cross-site vulnerability is [[cross-site request forgery]] or CSRF.  In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank).  It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user.  In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects.  Checking the HTTP Referrer header can also help.

"JavaScript hijacking" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript.  Possible solutions include:
* requiring an authentication token in the [[POST (HTTP)|POST]] and [[GET (HTTP)|GET]] parameters for any response that returns private information
* using POST and never GET for requests that return private information

====Misplaced trust in the client====
Developers of client-server applications must recognize that untrusted clients may be under the control of attackers.  The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary.  Some implications are:

* Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be [[obfuscated code|obfuscated]], but obfuscation can be reverse-engineered.
* JavaScript form validation only provides convenience for users, not security.  If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.
* Scripts can be selectively disabled, so JavaScript can't be relied on to prevent operations such as right-clicking on an image to save it.<ref>
{{cite journal
  | title = Right-click "protection"? Forget about it
  | date = 2008-06-17
  | url = http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/
  | issn = 1797-1993
  | accessdate = 2008-06-17 }}
</ref>
* It is extremely bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.

====Browser and plugin coding errors====
JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as [[buffer overflow]]s.  These flaws can allow attackers to write scripts which would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.

These flaws have affected major browsers including Firefox,<ref>Mozilla Corporation, [http://www.mozilla.org/security/announce/2006/mfsa2006-38.html Buffer overflow in crypto.signText()]</ref> Internet Explorer,<ref>Paul Festa, CNet, [http://news.com.com/2100-1001-214620.html Buffer-overflow bug in IE]</ref> and Safari.<ref>SecurityTracker.com, [http://securitytracker.com/alerts/2006/Mar/1015713.html Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files]</ref>

Plugins, such as video players, [[Adobe Flash#Flash client security|Adobe Flash]], and the wide range of [[ActiveX]] controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).<ref>SecurityFocus, [http://www.securityfocus.com/bid/19030/info Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability]</ref><ref>Fusion Authority, [http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm Macromedia Flash ActiveX Buffer Overflow]</ref>

In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.<ref>Mike Friedman, [http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx Protected Mode in Vista IE7]</ref>  [[Google Chrome]] similarly confines its page renderers to their own "sandbox".

====Sandbox implementation errors====
Web browsers are capable of running JavaScript outside of the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the web.

Incorrectly granting privileges to JavaScript from the web has played a role in vulnerabilities in both Internet Explorer<ref>US CERT, [https://www.kb.cert.org/vuls/id/713878 Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame]</ref> and Firefox.<ref>Mozilla Foundation, [http://www.mozilla.org/security/announce/2005/mfsa2005-41.html Mozilla Foundation Security Advisory 2005-41: Privilege escalation via DOM property overrides]</ref>  In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.<ref>Microsoft Corporation, [http://technet.microsoft.com/en-us/library/bb457150.aspx#EHAA Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security]</ref>

[[Microsoft Windows]] allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: [[Windows Script Host]]).  This makes JavaScript (like [[VBScript]]) a theoretically viable vector for a [[Trojan horse (computing)|Trojan horse]], although JavaScript Trojan horses are uncommon in practice.<ref>For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, [http://www.symantec.com/security_response/writeup.jsp?docid=2003-100111-0931-99 JS.Seeker.K]</ref>

==Uses outside web pages==
In addition to web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own [[object model]] which provides access to the host environment.  The core JavaScript language remains mostly the same in each application.

===Embedded scripting language===
* Google's [[Google Chrome|Chrome]] extensions, [[Opera]]'s extensions, Apple's [[Safari (web browser)|Safari 5]] extensions, Apple's [[Dashboard (Mac OS)|Dashboard Widgets]], Microsoft's [[Microsoft Gadgets|Gadgets]], [[Yahoo! Widgets]], [[Google Desktop#Gadgets and plug-ins|Google Desktop Gadgets]], and [[Serence]] [[Klipfolio]] are implemented using JavaScript.
* Adobe's [[Adobe Acrobat#Security|Acrobat and Adobe Reader]] support JavaScript in [[Portable Document Format|PDF]] files.<ref>{{cite web|url=http://www.adobe.com/devnet/acrobat/javascript.html | accessdate=2009-08-18 | title= JavaScript for Acrobat}}</ref>
* Tools in the [[Adobe Creative Suite]], including [[Adobe Photoshop|Photoshop]], [[Adobe Illustrator|Illustrator]], [[Dreamweaver]], and [[InDesign]], allow scripting through JavaScript.
* [[OpenOffice.org]], an office application suite, allows JavaScript to be used as a scripting language.
* The interactive music signal processing software [[Max/MSP]] released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows much more precise control than the default GUI-centric programming model.
* ECMAScript was included in the [[VRML]]97 standard for scripting nodes of VRML scene description files.
* [[Sphere (program)|Sphere]] is an open-source and cross-platform computer program designed primarily to make role-playing games that use JavaScript as a scripting language.
* The [[Open-source software|open-source]] ''Re-Animator'' framework allows developing 2D sprite-based games using JavaScript and XML.<ref>[https://launchpad.net/reanimator Re-Animator], in Launchpad</ref>
* The [[Unity (game engine)|Unity]] game engine supports a modified version of JavaScript for scripting via Mono.<ref>{{cite web
| url=http://unity3d.com/unity/workflow/scripting
| title=Unity Scripting
| publisher=unity3d.com
| accessdate=2013-01-29
}}</ref>
* [[DX Studio|DX Studio (3D engine)]] uses the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] implementation of JavaScript for game and simulation logic.<ref>
{{cite web |url=http://www.dxstudio.com/features_tech.aspx
| title=Technical Specification
| publisher=dxstudio.com
| accessdate=2009-10-20
}}</ref>
* [[Maxwell Render]] ([[Rendering (computer graphics)|rendering]] software) provides an ECMA standard based scripting engine for tasks automation.<ref>THINK! The Maxwell Render Resourcer Center, [http://think.maxwellrender.com/scripting_references-269.html Scripting References]</ref>
* [[Google Apps Script]] in [[Google Spreadsheets]] and [[Google Sites]] allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.<ref>[[Google Apps Script]], [http://www.google.com/google-d-s/scripts/scripts.html Welcome to Google Apps Script]</ref>
* Many [[Internet Relay Chat clients|IRC clients]], like [[ChatZilla]] or [[XChat]], use JavaScript for their scripting abilities.<ref>{{cite web|title=ChatZilla! Frequently Asked Questions - 4.5. How do I write scripts?|url=http://chatzilla.hacksrus.com/faq/#scripts|publisher=[[Hacksrus.com]]|accessdate=11 February 2011}}</ref><ref>{{cite web|title=http://unborn.ludost.net/xcdscript/|url=http://unborn.ludost.net/xcdscript/|accessdate=11 February 2011}}</ref>
* SpinetiX products use the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] JavaScript engine to allow scripting within SVG files to create digital signage projects.<ref>{{cite web|title=JavaScript - SpinetiX Support Wiki|url=http://support.spinetix.com/wiki/JavaScript|publisher=SpinetiX|accessdate=12 December 2012}}</ref>
* [[Cloud Party]] virtual world uses a limited version of JavaScript/ECMAScript 5 as in-world scripting language.<ref>{{cite web|title=Scripting Overview - Cloud Party Wiki|url=http://wiki.cloudparty.com/wiki/Scripting_Overview|publisher=Cloud Party, Inc.|accessdate=7 January 2013}}</ref>

===Scripting engine===
* Microsoft's [[Active Scripting]] technology supports [[JScript]] as a scripting language.<ref name="VersionInformation">{{cite web|url=http://msdn.microsoft.com/en-us/library/s4esdbwz(v=VS.94).aspx |title=Version Information (JavaScript) |publisher=Msdn.microsoft.com |date= |accessdate=2013-05-26}}</ref>
* The [[Java programming language]] introduced the <code>javax.script</code> package in version 6 that includes a JavaScript implementation based on [[Rhino (JavaScript engine)|Mozilla Rhino]]. Thus, Java applications can host scripts that access the application's variables and objects, much like web browsers host scripts that access a webpage's Document Object Model (DOM).<ref>{{cite web|url=http://java.sun.com/javase/6/webnotes/index.html#scripting |title=javax.script release notes |publisher=Java.sun.com |date= |accessdate=2009-05-19}}</ref>{{Sfn|Flanagan|Ferguson|2006|pp=214 et seq}}
* The [[Qt (toolkit)|Qt]] C++ toolkit includes a <code>QtScript</code> module to interpret JavaScript, analogous to Java's <code>javax.script</code> package.<ref>Nokia Corporation, [http://doc.qt.nokia.com/4.6/qtscript.html QtScript Module]</ref>
* ''JSDB'' (JavaScript for Databases) is an [[Open-source software|open-source]] JavaScript shell for Windows, Mac OS X, Linux, and Unix, which extends the [[SpiderMonkey|Mozilla JavaScript engine]] with file, database, email, and network objects.<ref>[http://www.jsdb.org/ JSDB.org] (Official website)</ref>
* ''jslibs'' is an open-source JavaScript shell for Windows and Linux which extends the [[SpiderMonkey|Mozilla JavaScript engine]].  It has the ability to call functions in commonly used libraries like NSPR, SQLite, libTomCrypt, OpenGL, OpenAL, and librsvg.<ref>[https://code.google.com/p/jslibs/ jslibs] on Google Code</ref>
* Late Night Software's [[JavaScript OSA]] (aka JavaScript for OSA, or JSOSA) is a freeware alternative to [[AppleScript]] for Mac OS X. It is based on the Mozilla 1.5 JavaScript implementation, with the addition of a <code>MacOS</code> object for interaction with the operating system and third-party applications.<ref>[[Open Scripting Architecture]]</ref>

===Application platform===
* [[ActionScript]], the programming language used in [[Adobe Flash]], is another implementation of the ECMAScript standard.
* [[Adobe Integrated Runtime]] is a JavaScript runtime that allows developers to create desktop applications.
* [[CA, Inc.]]'s AutoShell cross-application scripting environment is built on the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] Javascript engine.  It contains [[preprocessor]]-like extensions for command definition, as well as custom classes for various system-related tasks like file I/O, operation system command invocation and redirection, and COM scripting.
* [[GNOME Shell]], the shell for the {{nobr|[[GNOME|GNOME 3]]}} desktop environment<ref>
{{cite web
| url=http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor
| title=Behind the Scenes with Owen Taylor
| publisher=The GNOME Journal
| accessdate=2010-01-23
}}</ref>, made Javascript its default programming language in 2013<ref>
{{cite web
| url = http://treitter.livejournal.com/14871.html
| title = Answering the question: "How do I develop an app for GNOME?"
}}</ref>.
* The [[Mozilla]] platform, which underlies [[Firefox]], [[Mozilla Thunderbird|Thunderbird]], and some other web browsers, uses JavaScript to implement the [[graphical user interface]] (GUI) of its various products.
* [[Digital Airways|myNFC]] is a JavaScript based framework that allows developers to create applications for smart phones.<ref>{{cite web|author=Category: Project's basics |url=http://www.mynfc.org/ |title=myNFC.org |publisher=myNFC.org |date=2013-05-22 |accessdate=2013-05-26}}</ref>
* [[Qt Quick]]'s markup language (available since Qt 4.7) uses JavaScript for its application logic.  Its declarative syntax is also similar to JavaScript.
* [[TypeScript]] is a programming language based on JavaScript that adds support for optional [[type annotation]]s and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting [[ECMAScript|ECMAScript 3]] or higher. The compiler is itself written in TypeScript.
* [[Ubuntu Touch]] provides a JavaScript API for its unified usability interface.
* [[webOS]] uses the [[WebKit]] implementation of JavaScript in its [[Software development kit|SDK]] to allow developers to create stand-alone applications solely in JavaScript.
* [[Windows Runtime#JavaScript|WinJS]] provides a special Windows Library for JavaScript functionality in [[Windows 8]] that enables the development of [[Metro (design language)|Modern style]] (formerly ''Metro style'') applications in [[HTML5]] and JavaScript.

==Development tools==
Within JavaScript, access to a [[debugger]] becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the [[Document Object Model]]), it is useful to have access to a debugger for each of the browsers that a web application targets.<ref>{{cite web|url=http://www.alistapart.com/articles/advanced-debugging-with-javascript/ |title=Advanced Debugging With JavaScript |publisher=alistapart.com |date=2009-02-03 |accessdate=2010-05-28}}</ref>

Script debuggers are available for [[Internet Explorer]], [[Firefox]], [[Safari (web browser)|Safari]], [[Google Chrome]], and [[Opera (web browser)|Opera]].<ref>{{cite web|url=http://javascript.about.com/od/problemsolving/ig/JavaScript-Debugging/ |title=The JavaScript Debugging Console |publisher=javascript.about.com |date=2010-05-28 |accessdate=2010-05-28}}</ref>

Three debuggers are available for Internet Explorer: [[Microsoft Visual Studio]] is the richest of the three, closely followed by [[Microsoft Script Editor]] (a component of [[Microsoft Office]]),<ref>[http://msdn2.microsoft.com/en-us/library/aa202668(office.11).aspx JScript development in Microsoft Office 11] (MS InfoPath 2003)</ref> and finally the free [[Microsoft Script Debugger]] which is far more basic than the other two. The free [[Microsoft Visual Web Developer Express]] provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio.  Internet Explorer has included developer tools since version 8 (reached by pressing the F12 key).

Web applications within Firefox can be debugged using the [[Firebug (Firefox extension)|Firebug]] add-on, or the older [[Venkman]] debugger. Firefox also has a simpler built-in Error Console, which logs and evaluates JavaScript. It also logs [[CSS]] errors and warnings.

[[Opera (web browser)|Opera]] includes a set of tools called [[Opera Dragonfly|Dragonfly]].<ref>{{cite web|url=http://www.opera.com/dragonfly/|title=Opera DragonFly|publisher=Opera Software}}</ref>

[[WebKit]]'s Web Inspector includes a JavaScript debugger<ref>{{cite web|url=http://webkit.org/blog/61/introducing-drosera/ |title=Introducing Drosera - Surfin' Safari |publisher=Webkit.org |date=2006-06-28 |accessdate=2009-05-19}}</ref>, which is used in [[Safari (web browser)|Safari]].  A modified version is used in [[Google Chrome]].

Some debugging aids are themselves written in JavaScript and built to run on the Web. An example is the program [[JSLint]], developed by [[Douglas Crockford]] who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines.

==Version history==
{{See also|ECMAScript#Dialects|ECMAScript#Version correspondence}}

The following table is based on information from multiple sources<ref>{{cite web|url=http://www.webmasterworld.com/forum91/68.htm |title=JavaScript - JScript - ECMAScript version history |publisher=Webmasterworld.com |date= |accessdate=2009-12-17}}</ref><ref>{{cite web|author=John Resig |url=http://ejohn.org/blog/versions-of-javascript |title=Versions of JavaScript |publisher=Ejohn.org |date= |accessdate=2009-05-19}}</ref><ref>{{cite web|url=http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsoriversioninformation.asp |title=Version Information (JScript) |publisher=Msdn.microsoft.com |date= |accessdate=2009-12-17}}</ref>.

{| class="wikitable" style="text-align:center;"
|-
! Version !! Release date !! Equivalent to !! Netscape<br />Navigator !! Mozilla<br />Firefox !! Internet<br />Explorer !! Opera !! Safari !! Google<br />Chrome
|-
| {{Version |o |1.0}}  || March 1996 ||  || 2.0 ||  || 3.0 ||  || ||
|-
| {{Version |o |1.1}}  || August 1996 ||  || 3.0 ||  ||  ||  || ||
|-
| {{Version |o |1.2}}  || June 1997 ||  || 4.0-4.05 ||  ||  || 3<ref>{{cite web|title=History of the Opera web browser|url=http://en.wikipedia.org/wiki/History_of_the_Opera_web_browser#Version_3}}</ref>  || ||
|-
| {{Version |o |1.3}}  || October 1998 || ECMA-262 1st + 2nd edition || 4.06-4.7x ||  || 4.0 || 5<ref>{{cite web|title=What Version of Javascript|url=http://javascript.about.com/library/bljver.htm}}</ref>  || ||
|-
| {{Version |o |1.4}}  ||  ||  || Netscape<br />Server ||  ||  || 6 || ||
|-
| {{Version |o |1.5}}  || November 2000 || ECMA-262 3rd edition || 6.0 || 1.0 || 5.5 (JScript 5.5),<br />6 (JScript 5.6),<br />7 (JScript 5.7),<br />8 (JScript 5.8) || 7.0 || 3.0-5 || 1.0-10.0.666
|-
| {{Version |o |1.6}}  || November 2005 || 1.5 + array extras + array and string generics + [[E4X]] ||  || 1.5 ||  ||  || ||
|-
| {{Version |o |1.7}}  || October 2006 || 1.6 + [https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&redirectslug=New_in_JavaScript_1.7#Generators Pythonic generators] + iterators + let ||  || 2.0 ||  ||  || ||
|-
| {{Version |o |1.8}}  || June 2008 || 1.7 + [[generator (computer programming)|generator expressions]] + [[closure (computer science)|expression closures]] ||  || 3.0 ||  || 11.50 || ||
|-
| {{Version |o |1.8.1}}  ||  || 1.8 + [[JSON#Native encoding and decoding in browsers|native JSON]] support + minor updates ||  || 3.5 ||  ||  || ||
|-
| {{Version |o |1.8.2}} || June 22, 2009 || 1.8.1 + minor updates || || 3.6 || || || ||
|-
| {{Version |o |1.8.5}} || July 27, 2010 || 1.8.2 + [[ECMAScript]] 5 compliance ||  || 4 || 9 || 11.60 ||
|
|-
| {{Version |c |1.8.6}}{{Dubious|date=August 2013}} || ||  ||  || 17 || || ||
|}
<small>{{Version |l |show=110100}}</small>

==Related languages and features==

[[JSON]], or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's literal syntax.

[[jQuery]] and [[Prototype JavaScript Framework|Prototype]] are popular JavaScript libraries designed to simplify [[Document Object Model|DOM]]-oriented client-side HTML scripting.

Mozilla browsers currently support [[LiveConnect]], a feature that allows JavaScript and Java to intercommunicate on the web. However, Mozilla-specific support for LiveConnect is scheduled to be phased out in the future in favor of passing on the LiveConnect handling via [[NPAPI]] to the Java 1.6+ plug-in (not yet supported on the Mac {{as of|March 2010|lc=y}}).<ref>[http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/ Release Notes for the Next-Generation Java™ Plug-In Technology (introduced in Java SE 6 update 10)]. Java.sun.com. Retrieved on 2013-06-13.</ref> Most browser inspection tools, such as [[Firebug (web development)|Firebug]] in Firefox, include JavaScript interpreters that can act on the visible page's DOM.

===Use as an intermediate language===

As JavaScript is the most widely supported client-side language that can run within a web browser, it has become an [[intermediate language]] for other languages to target. This has included both newly-created languages and ports of existing languages. Some of these include:

* [[Objective-J]], a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and [[Smalltalk]]/[[Objective-C]] style dynamic dispatch and optional pseudo-static typing to JavaScript.
* [[Processing.js]],  a JavaScript port of Processing, a programming language designed to write visualizations, images, and interactive content. It allows web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin.
* [[CoffeeScript]], an alternate syntax for JavaScript intended to be more concise and readable.  It adds features like array comprehensions (also available in JavaScript since version 1.7<ref>{{cite web|url=https://developer.mozilla.org/en/New_in_JavaScript_1.7#Array_comprehensions_%28Merge_into_Array_comprehensions%29 |title=New in JavaScript 1.7 |publisher=Developer.mozilla.org |date=2012-12-05 |accessdate=2013-05-26}}</ref>) and pattern matching.  Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax.
* [[Google Web Toolkit]] translates a subset of Java to JavaScript.
* [[Scala (programming language)|Scala]], an object-oriented and functional programming language, has an [http://lampwww.epfl.ch/~doeraene/scala-js/ experimental Scala-to-Javascript compiler].
* [http://www.playmycode.com/build/sandbox Quby], a proprietary sand-boxed Ruby-like language by PlayMyCode used for building browser games.
* [http://tinlizzie.org/ometa/ OMeta], a functional language featuring pattern matching.
* [https://code.google.com/p/phype/ Phype], an [[Open-source software|open-source]] [[PHP]]-to-JavaScript compiler.
* [https://code.google.com/p/tiscript/ TIScript], a superset of JavaScript that adds classes, namespaces, and lambda expressions.
* [https://github.com/clojure/clojurescript ClojureScript], a [[Clojure]] to JavaScript compiler which is compatible with the advanced compilation mode of the [[Google Closure Tools|Google Closure]] optimizing compiler.
* [http://common-lisp.net/project/parenscript Parenscript], a [[Common Lisp]] library that can translate both well-circumscribed [[Common Lisp]] code, and JavaScript rendered as "inlined" [[S-expression]]s to Javascript.
* [https://github.com/qsnake/py2js Py2JS], a subset of [[Python (programming language)|Python]]
* [[Pyjamas (software)|Pyjamas]], a port of [[Google Web Toolkit]] to [[Python (programming language)|Python]] (translates a subset of Python to JavaScript)
* [[Dart (programming language)|Dart]], an open-source programming language developed by Google, can be compiled to JavaScript.
* [http://hashcollision.org/whalesong/ Whalesong], a [[Racket (programming language)|Racket]]-to-JavaScript compiler.
* [[Emscripten]], a [[LLVM]]-backend for porting native libraries to JavaScript.
* [[Fantom (programming language)|Fantom]] a programming language that runs on JVM, .NET and JavaScript.
* [[TypeScript]], a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds optional static typing and class-based object-oriented programming to the language.
* [[Haxe]], an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript.

===JavaScript and Java===
A common misconception is that JavaScript is similar or closely related to [[Java (programming language)|Java]]. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically [[Sandbox (computer security)|sandboxed]] (when used inside a browser). And JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.<ref name="popularity"/>  But the similarities end there.

The differences between the two languages are more prominent than their similarities. Java has [[static typing]], while JavaScript's typing is dynamic (meaning a variable can hold an object of any type and cannot be restricted). Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are [[Class-based programming|class-based]], while JavaScript's are [[Prototype-based programming|prototype-based]]. And Java does not support [[functional programming]], while Javascript does (JavaScript contains many features based on the [[Scheme (programming language)|Scheme language]]).

==References==
{{Reflist|33em}}

==Further reading==
{{Refbegin|33em}}
*{{cite book |last=Bhangal |first=Sham |coauthors=Jankowski, Tomasz |title=Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash |year=2003 |publisher=APress L. P. |isbn=1-59059-152-6}}
*{{cite book |last=Burns |first=Joe |coauthors=Growney, Andree S. |title=JavaScript Goodies |year=2001 |publisher=Pearson Education |isbn=0-7897-2612-2}}
*{{cite book |last=Duffy |first=Scott |title=How to do Everything with JavaScript |year=2003 |publisher=Osborne |isbn=0-07-222887-3 }}
*{{cite book|last1= Flanagan |first1= David |last2= Ferguson |first2= Paula |title= JavaScript: The Definitive Guide |edition= 5th |year= 2006 |publisher= [[O'Reilly Media|O'Reilly & Associates]] |isbn= 0-596-10199-6 |ref= harv}}
*{{cite book |last=Goodman |first=Danny |coauthors=Eich, Brendan |title=JavaScript Bible |year=2001 |publisher=John Wiley & Sons |isbn=0-7645-3342-8}}
*{{cite book |last=Goodman |first=Danny |coauthors=Markel, Scott |title=JavaScript and DHTML Cookbook |year=2003 |publisher=O'Reilly & Associates |isbn=0-596-00467-2}}
*{{cite book |last=Harris |first=Andy |title=JavaScript Programming for the Absolute Beginner |year=2001 |publisher=Premier Press |isbn=0-7615-3410-5}}
*{{cite book |last=Haverbeke |first=Marijn |title=Eloquent JavaScript |year=2011 |publisher=No Starch Press|isbn=978-1593272821}}
*{{cite book |last=Heinle |first=Nick |coauthors=Koman, Richard |title=Designing with JavaScript |year=1997 |publisher=O'Reilly & Associates |isbn=1-56592-300-6}}
*{{cite book |last=McDuffie |first=Tina Spain |title=JavaScript Concepts & Techniques: Programming Interactive Web Sites |year=2003 |publisher=Franklin, Beedle & Associates |isbn=1-887902-69-4}}
*{{cite book |last=McFarlane |first=Nigel |title=Rapid Application Development with Mozilla |year=2003 |publisher=Prentice Hall Professional Technical References |isbn=0-13-142343-6}}
*{{cite book |last=Powell |first=Thomas A. |coauthors=Schneider, Fritz |title=JavaScript: The Complete Reference |year=2001 |publisher=McGraw-Hill Companies |isbn=0-07-219127-9}}
*{{cite book |last=Shelly |first=Gary B. |coauthors=Cashman, Thomas J.; Dorin, William J.; Quasney, Jeffrey J. |title=JavaScript: Complete Concepts and Techniques |year=2000 |publisher=Course Technology |location=Cambridge |isbn=0-7895-6233-2}}
*{{cite book |last=Vander Veer |first=Emily A. |title=JavaScript For Dummies |edition=4th |year=2004 |publisher=Wiley Pub. |isbn=0-7645-7659-3}}
*{{cite book |last=Watt |first=Andrew H. |coauthors=Watt, Jonathan A.; Simon, Jinjer L. |title=Teach Yourself JavaScript in 21 Days |year=2002 |publisher=Pearson Education |isbn=0-672-32297-8}}
{{Refend}}

==External links==
{{Portal|Computer programming}}
{{Spoken Wikipedia|En-JavaScript.ogg|2011-11-01}}
{{Wikibooks|JavaScript}}
{{Wikiversity|Topic:JavaScript}}
* [http://referencedesigner.com/tutorials/js/js_1.php JS Beginner's tutorial]
* [http://www.codecademy.com/tracks/javascript Codeacademy's JavaScript Track]
* [http://yuiblog.com/crockford/ Douglas Crockford's video lectures on JavaScript]
* Douglas Crockford's [http://javascript.crockford.com/survey.html A Survey of the JavaScript Programming Language]
* Mozilla Developer Center
** [https://developer.mozilla.org/en/JavaScript Mozilla's Official Documentation on JavaScript]
** References for Core JavaScript versions: [https://developer.mozilla.org/en/JavaScript/Reference 1.5+]
** [https://developer.mozilla.org/en/JavaScript/New_in_JavaScript overview over new features in JavaScript]
** List of JavaScript releases: versions [https://developer.mozilla.org/en/JavaScript/Reference/About 1.5+]
** [https://developer.mozilla.org/en/A_re-introduction_to_JavaScript Re-Introduction to JavaScript]
* [http://eloquentjavascript.net/ Eloquent JavaScript] by Marijn Haverbeke—a free, Creative Commons–licensed eBook
* [http://dev.opera.com/articles/javascript/ JavaScript]—Opera Developer Community
* [https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS/ List of languages that compile to JS]

{{JavaScript}}
{{ECMAScript}}

{{DEFAULTSORT:JavaScript}}
[[Category:1995 introductions]]
[[Category:American inventions]]
[[Category:Cross-platform software]]
[[Category:Functional languages]]
[[Category:JavaScript| ]]
[[Category:Object-based programming languages]]
[[Category:Programming languages created in 1995]]
[[Category:Prototype-based programming languages]]
[[Category:Scripting languages]]
[[Category:Web programming]]