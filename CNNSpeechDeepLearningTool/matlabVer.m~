load('setup.mat');
%layers

numClasses = numel(categories(YTrain));
classWeights = rand(numClasses,1);
classWeights = classWeights'/mean(classWeights);
%sz = size(XTrain);
%specSize = sz(1:2);
%imageSize = [specSize 1];

timePoolSize = ceil(imageSize(2)/8);
dropoutProb = 0.2;
numF = 25;
layers = [
    
    imageInputLayer(imageSize)
    
    %3*3 area 25 filters
    convolution2dLayer(3,numF,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    %maxPooling 3*3 
    maxPooling2dLayer(3,'Stride',2,'Padding','same')

    convolution2dLayer(3,2*numF,'Padding','same')
    batchNormalizationLayer
    reluLayer

    maxPooling2dLayer(3,'Stride',2,'Padding','same')

    convolution2dLayer(3,4*numF,'Padding','same')
    batchNormalizationLayer
    reluLayer

    maxPooling2dLayer(3,'Stride',2,'Padding','same')

    convolution2dLayer(3,4*numF,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer([1 timePoolSize])

    dropoutLayer(dropoutProb)
    fullyConnectedLayer(numClasses)
    softmaxLayer
    classificationLayer
    %weightedClassificationLayer(classWeights)];

%training option 
miniBatchSize; %128
validationFrequency = floor(numel(YTrain)/miniBatchSize);
options = trainingOptions('adam', ...
    'InitialLearnRate',3e-4, ...
    'MaxEpochs',35, ...
    'MiniBatchSize',miniBatchSize, ...
    'Shuffle','every-epoch', ...
    'Plots','training-progress', ...
    'Verbose',false, ...
    'ValidationData',{XValidation,YValidation}, ...
    'ValidationFrequency',validationFrequency, ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.1, ...
    'LearnRateDropPeriod',30);

doTraining = true;
if doTraining
    trainedNet = trainNetwork(augimdsTrain,layers,options);
%else
 %   load('commandNet.mat','trainedNet');
end

YValPred = classify(trainedNet,XValidation);
validationError = mean(YValPred ~= YValidation);
YTrainPred = classify(trainedNet,XTrain);
trainError = mean(YTrainPred ~= YTrain);
YTestPred = classify(trainedNet,XTest);
testError = mean(YTestPred ~= YTest);
disp("Training error: " + trainError*100 + "%")
disp("Validation error: " + validationError*100 + "%")
disp("Test error: " + testError*100 +"%")

figure('Units','normalized','Position',[0.2 0.2 0.5 0.5]);
cm = confusionchart(YValidation,YValPred);
cm.Title = 'Confusion Matrix for Validation Data';
cm.ColumnSummary = 'column-normalized';
cm.RowSummary = 'row-normalized';
sortClasses(cm, labels)